<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1886" onload="init(evt)" viewBox="0 0 1200 1886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:16px }
#title { text-anchor:middle; font-size:21px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="32.00">Runtime flamegraph</text><text id="subtitle" x="50.0000%" y="64.00">⟲ See the timeline for ordering and concurrency ⟲</text><text id="details" fill="rgb(0,0,0)" x="10" y="84.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="32.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="32.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1873.00"> </text><svg id="frames" x="10" width="1180" total_samples="835"><g><title>&lt;frozen importlib._bootstrap_external&gt;:1173 (create_module) (2 samples, 0.24%)</title><rect x="0.1198%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="1" fg:w="2"/><text x="0.3698%" y="223.50"></text></g><g><title> (2 samples, 0.24%)</title><rect x="0.1198%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="1" fg:w="2"/><text x="0.3698%" y="245.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:565 (module_from_spec) (2 samples, 0.24%)</title><rect x="0.1198%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="1" fg:w="2"/><text x="0.3698%" y="267.50"></text></g><g><title> (2 samples, 0.24%)</title><rect x="0.1198%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="1" fg:w="2"/><text x="0.3698%" y="289.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:666 (_load_unlocked) (2 samples, 0.24%)</title><rect x="0.1198%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="1" fg:w="2"/><text x="0.3698%" y="311.50"></text></g><g><title> (2 samples, 0.24%)</title><rect x="0.1198%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="1" fg:w="2"/><text x="0.3698%" y="333.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (2 samples, 0.24%)</title><rect x="0.1198%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="1" fg:w="2"/><text x="0.3698%" y="355.50"></text></g><g><title> (2 samples, 0.24%)</title><rect x="0.1198%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="1" fg:w="2"/><text x="0.3698%" y="377.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (2 samples, 0.24%)</title><rect x="0.1198%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="1" fg:w="2"/><text x="0.3698%" y="399.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (3 samples, 0.36%)</title><rect x="0.1198%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="1" fg:w="3"/><text x="0.3698%" y="179.50"></text></g><g><title> (3 samples, 0.36%)</title><rect x="0.1198%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="1" fg:w="3"/><text x="0.3698%" y="201.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:647 (_compile_bytecode) (6 samples, 0.72%)</title><rect x="1.3174%" y="166" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="179.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="1.3174%" y="188" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="201.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:978 (get_code) (6 samples, 0.72%)</title><rect x="1.3174%" y="210" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="223.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="1.3174%" y="232" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="245.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:846 (exec_module) (6 samples, 0.72%)</title><rect x="1.3174%" y="254" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="267.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="1.3174%" y="276" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="289.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (6 samples, 0.72%)</title><rect x="1.3174%" y="298" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="311.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="1.3174%" y="320" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="333.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (6 samples, 0.72%)</title><rect x="1.3174%" y="342" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="355.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="1.3174%" y="364" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="377.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (6 samples, 0.72%)</title><rect x="1.3174%" y="386" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="11" fg:w="6"/><text x="1.5674%" y="399.50"></text></g><g><title> (18 samples, 2.16%)</title><rect x="0.0000%" y="144" width="2.1557%" height="21" fill="rgb(255,228,228)" fg:x="0" fg:w="18"/><text x="0.2500%" y="157.50"></text></g><g><title>    if options[&quot;verbose&quot;]: (2 samples, 0.24%)</title><rect x="3.8323%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:113 (admm) (2 samples, 0.24%)</title><rect x="3.8323%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="179.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="3.8323%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="3.8323%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="223.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="3.8323%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="3.8323%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="267.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="3.8323%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="3.8323%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="311.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="3.8323%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="333.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="3.8323%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="355.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="3.8323%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="3.8323%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="399.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="3.8323%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="3.8323%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="443.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="3.8323%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="3.8323%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="487.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="3.8323%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="3.8323%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="531.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="3.8323%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="3.8323%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="32" fg:w="2"/><text x="4.0823%" y="575.50"></text></g><g><title>    indexer = non_nan_idx[non_nans.argsort(kind=kind)] (2 samples, 0.24%)</title><rect x="4.0719%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="34" fg:w="2"/><text x="4.3219%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/core/sorting.py:498 (nargsort) (2 samples, 0.24%)</title><rect x="4.0719%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="34" fg:w="2"/><text x="4.3219%" y="179.50"></text></g><g><title>    int32max = np.int32(np.iinfo(np.int32).max) (3 samples, 0.36%)</title><rect x="4.3114%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="36" fg:w="3"/><text x="4.5614%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_sputils.py:170 (get_index_dtype) (3 samples, 0.36%)</title><rect x="4.3114%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="36" fg:w="3"/><text x="4.5614%" y="179.50"></text></g><g><title>        return get_index_dtype(arrays, maxval, (check_contents and not self._is_array)) (3 samples, 0.36%)</title><rect x="4.3114%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="36" fg:w="3"/><text x="4.5614%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:1289 (_get_index_dtype) (3 samples, 0.36%)</title><rect x="4.3114%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="36" fg:w="3"/><text x="4.5614%" y="223.50"></text></g><g><title>        r_dual = np.linalg.norm(P @ zk1 + q + A.T @ nuk1 + rho_vec * uk1, ord=np.inf) (2 samples, 0.24%)</title><rect x="5.6287%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:207 (admm) (2 samples, 0.24%)</title><rect x="5.6287%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="311.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="5.6287%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="5.6287%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="355.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="5.6287%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="5.6287%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="399.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="5.6287%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="5.6287%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="443.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="5.6287%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="5.6287%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="487.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="5.6287%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="5.6287%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="531.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="5.6287%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="5.6287%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="575.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="5.6287%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="5.6287%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="619.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="5.6287%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="5.6287%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="663.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="5.6287%" y="672" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="5.6287%" y="694" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="47" fg:w="2"/><text x="5.8787%" y="707.50"></text></g><g><title>    return (isinstance(element, generic) (3 samples, 0.36%)</title><rect x="5.6287%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="47" fg:w="3"/><text x="5.8787%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/numeric.py:1931 (isscalar) (3 samples, 0.36%)</title><rect x="5.6287%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="47" fg:w="3"/><text x="5.8787%" y="179.50"></text></g><g><title>    return np.isscalar(x) or (isdense(x) and x.ndim == 0) (3 samples, 0.36%)</title><rect x="5.6287%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="47" fg:w="3"/><text x="5.8787%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_sputils.py:213 (isscalarlike) (3 samples, 0.36%)</title><rect x="5.6287%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="47" fg:w="3"/><text x="5.8787%" y="223.50"></text></g><g><title>        if isscalarlike(other): (3 samples, 0.36%)</title><rect x="5.6287%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="47" fg:w="3"/><text x="5.8787%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:621 (__matmul__) (3 samples, 0.36%)</title><rect x="5.6287%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="47" fg:w="3"/><text x="5.8787%" y="267.50"></text></g><g><title>    return 1 + sum(node_count(arg) for arg in getattr(expr, &apos;args&apos;, [])) (2 samples, 0.24%)</title><rect x="5.9880%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="50" fg:w="2"/><text x="6.2380%" y="157.50"></text></g><g><title>    return _cvxcore.build_matrix(*args) (3 samples, 0.36%)</title><rect x="6.4671%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="54" fg:w="3"/><text x="6.7171%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/cvxcore/python/cvxcore.py:1006 (build_matrix) (3 samples, 0.36%)</title><rect x="6.4671%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="54" fg:w="3"/><text x="6.7171%" y="179.50"></text></g><g><title>        problemData = cvxcore.build_matrix(lin_vec, (3 samples, 0.36%)</title><rect x="6.4671%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="54" fg:w="3"/><text x="6.7171%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/cvxcore/python/canonInterface.py:339 (get_problem_matrix) (3 samples, 0.36%)</title><rect x="6.4671%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="54" fg:w="3"/><text x="6.7171%" y="223.50"></text></g><g><title>        return canonInterface.get_problem_matrix(op_list, (2 samples, 0.24%)</title><rect x="6.5868%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/coeff_extractor.py:86 (affine) (2 samples, 0.24%)</title><rect x="6.5868%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="267.50"></text></g><g><title>        params_to_Ab = extractor.affine(expr_list) (2 samples, 0.24%)</title><rect x="6.5868%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/qp2quad_form/qp_matrix_stuffing.py:264 (apply) (2 samples, 0.24%)</title><rect x="6.5868%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="311.50"></text></g><g><title>            problem, inv = r.apply(problem) (2 samples, 0.24%)</title><rect x="6.5868%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/chain.py:76 (apply) (2 samples, 0.24%)</title><rect x="6.5868%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="355.50"></text></g><g><title>            data, inverse_data = solving_chain.apply(self, verbose) (2 samples, 0.24%)</title><rect x="6.5868%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:683 (get_problem_data) (2 samples, 0.24%)</title><rect x="6.5868%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="399.50"></text></g><g><title>        data, solving_chain, inverse_data = self.get_problem_data( (2 samples, 0.24%)</title><rect x="6.5868%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:1056 (_solve) (2 samples, 0.24%)</title><rect x="6.5868%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="443.50"></text></g><g><title>        return solve_func(self, *args, **kwargs) (2 samples, 0.24%)</title><rect x="6.5868%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="465.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:495 (solve) (2 samples, 0.24%)</title><rect x="6.5868%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="487.50"></text></g><g><title>        cvx_prob.solve(solver=solver, **solver_kwargs) (2 samples, 0.24%)</title><rect x="6.5868%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="509.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:200 (_solve_cvx) (2 samples, 0.24%)</title><rect x="6.5868%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="531.50"></text></g><g><title>            result = self._solve_cvx(canonical_form, solver, **kwargs) (2 samples, 0.24%)</title><rect x="6.5868%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="553.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:93 (decompose) (2 samples, 0.24%)</title><rect x="6.5868%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="575.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose) (2 samples, 0.24%)</title><rect x="6.5868%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:163 (_osd_tl1_l2d2p365) (2 samples, 0.24%)</title><rect x="6.5868%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="619.50"></text></g><g><title>        res = _osd_tl1_l2d2p365( (2 samples, 0.24%)</title><rect x="6.5868%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:157 (tl1_l2d2p365) (2 samples, 0.24%)</title><rect x="6.5868%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="55" fg:w="2"/><text x="6.8368%" y="663.50"></text></g><g><title>    return data (3 samples, 0.36%)</title><rect x="7.3054%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="61" fg:w="3"/><text x="7.5554%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_sputils.py:144 (getdata) (3 samples, 0.36%)</title><rect x="7.3054%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="61" fg:w="3"/><text x="7.5554%" y="179.50"></text></g><g><title>                self.data = getdata(obj, copy=copy, dtype=dtype) (3 samples, 0.36%)</title><rect x="7.3054%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="61" fg:w="3"/><text x="7.5554%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:166 (__init__) (3 samples, 0.36%)</title><rect x="7.3054%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="61" fg:w="3"/><text x="7.5554%" y="223.50"></text></g><g><title>        return self.__class__((self.data, (self.col, self.row)), (2 samples, 0.24%)</title><rect x="7.4251%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:306 (transpose) (2 samples, 0.24%)</title><rect x="7.4251%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="267.50"></text></g><g><title>        return self.transpose() (2 samples, 0.24%)</title><rect x="7.4251%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:727 (T) (2 samples, 0.24%)</title><rect x="7.4251%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="311.50"></text></g><g><title>        r_dual = np.linalg.norm(P @ zk1 + q + A.T @ nuk1 + rho_vec * uk1, ord=np.inf) (2 samples, 0.24%)</title><rect x="7.4251%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:207 (admm) (2 samples, 0.24%)</title><rect x="7.4251%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="355.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="7.4251%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="7.4251%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="399.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="7.4251%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="7.4251%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="443.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="7.4251%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="465.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="7.4251%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="487.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="7.4251%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="7.4251%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="531.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="7.4251%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="7.4251%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="575.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="7.4251%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="7.4251%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="619.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="7.4251%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="7.4251%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="663.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="7.4251%" y="672" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="7.4251%" y="694" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="707.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="7.4251%" y="716" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="729.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="7.4251%" y="738" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="62" fg:w="2"/><text x="7.6751%" y="751.50"></text></g><g><title>        idx_dtype = self._get_index_dtype((self.indptr, self.indices)) (2 samples, 0.24%)</title><rect x="7.6647%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="64" fg:w="2"/><text x="7.9147%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_compressed.py:156 (check_format) (2 samples, 0.24%)</title><rect x="7.6647%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="64" fg:w="2"/><text x="7.9147%" y="267.50"></text></g><g><title>        self.check_format(full_check=False) (2 samples, 0.24%)</title><rect x="7.6647%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="64" fg:w="2"/><text x="7.9147%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_compressed.py:105 (__init__) (2 samples, 0.24%)</title><rect x="7.6647%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="64" fg:w="2"/><text x="7.9147%" y="311.50"></text></g><g><title>        return self.__class__((self.data, (self.col, self.row)), (2 samples, 0.24%)</title><rect x="7.9042%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="66" fg:w="2"/><text x="8.1542%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:306 (transpose) (2 samples, 0.24%)</title><rect x="7.9042%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="66" fg:w="2"/><text x="8.1542%" y="355.50"></text></g><g><title>        idx_dtype = self._get_index_dtype((self.row, self.col), maxval=max(self.shape)) (3 samples, 0.36%)</title><rect x="7.9042%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="66" fg:w="3"/><text x="8.1542%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:284 (_check) (3 samples, 0.36%)</title><rect x="7.9042%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="66" fg:w="3"/><text x="8.1542%" y="267.50"></text></g><g><title>        self._check() (3 samples, 0.36%)</title><rect x="7.9042%" y="276" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="66" fg:w="3"/><text x="8.1542%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:204 (__init__) (3 samples, 0.36%)</title><rect x="7.9042%" y="298" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="66" fg:w="3"/><text x="8.1542%" y="311.50"></text></g><g><title>    return dtype (6 samples, 0.72%)</title><rect x="7.6647%" y="144" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="64" fg:w="6"/><text x="7.9147%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_sputils.py:199 (get_index_dtype) (6 samples, 0.72%)</title><rect x="7.6647%" y="166" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="64" fg:w="6"/><text x="7.9147%" y="179.50"></text></g><g><title>        return get_index_dtype(arrays, maxval, (check_contents and not self._is_array)) (6 samples, 0.72%)</title><rect x="7.6647%" y="188" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="64" fg:w="6"/><text x="7.9147%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:1289 (_get_index_dtype) (6 samples, 0.72%)</title><rect x="7.6647%" y="210" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="64" fg:w="6"/><text x="7.9147%" y="223.50"></text></g><g><title>    return _wrapreduction(a, np.add, &apos;sum&apos;, axis, dtype, out, keepdims=keepdims, (3 samples, 0.36%)</title><rect x="8.8623%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/fromnumeric.py:2313 (sum) (3 samples, 0.36%)</title><rect x="8.8623%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="223.50"></text></g><g><title>        return np.sum(output) (3 samples, 0.36%)</title><rect x="8.8623%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:600 (evaluate) (3 samples, 0.36%)</title><rect x="8.8623%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="267.50"></text></g><g><title>    return (0.5 * zk1 @ P @ zk1 + q @ zk1 + r) / obj_scale + g.evaluate( (3 samples, 0.36%)</title><rect x="8.8623%" y="276" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/util.py:93 (evaluate_objective) (3 samples, 0.36%)</title><rect x="8.8623%" y="298" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="311.50"></text></g><g><title>        obj_val = util.evaluate_objective(P, q, r, g, zk1, obj_scale, equil_scaling) (3 samples, 0.36%)</title><rect x="8.8623%" y="320" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:208 (admm) (3 samples, 0.36%)</title><rect x="8.8623%" y="342" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="355.50"></text></g><g><title>                self._iterates = admm.admm( (3 samples, 0.36%)</title><rect x="8.8623%" y="364" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (3 samples, 0.36%)</title><rect x="8.8623%" y="386" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="399.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (3 samples, 0.36%)</title><rect x="8.8623%" y="408" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (3 samples, 0.36%)</title><rect x="8.8623%" y="430" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="443.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (3 samples, 0.36%)</title><rect x="8.8623%" y="452" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="465.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (3 samples, 0.36%)</title><rect x="8.8623%" y="474" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="487.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (3 samples, 0.36%)</title><rect x="8.8623%" y="496" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="8.8623%" y="518" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="531.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="8.8623%" y="540" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="8.8623%" y="562" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="575.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="8.8623%" y="584" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (3 samples, 0.36%)</title><rect x="8.8623%" y="606" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="619.50"></text></g><g><title>            self.capacity_analysis.run( (3 samples, 0.36%)</title><rect x="8.8623%" y="628" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (3 samples, 0.36%)</title><rect x="8.8623%" y="650" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="663.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (3 samples, 0.36%)</title><rect x="8.8623%" y="672" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (3 samples, 0.36%)</title><rect x="8.8623%" y="694" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="707.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="8.8623%" y="716" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="729.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="8.8623%" y="738" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="74" fg:w="3"/><text x="9.1123%" y="751.50"></text></g><g><title>    if all(xfin) and all(yfin): (2 samples, 0.24%)</title><rect x="9.2216%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/numeric.py:2350 (isclose) (2 samples, 0.24%)</title><rect x="9.2216%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="267.50"></text></g><g><title>    res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan)) (2 samples, 0.24%)</title><rect x="9.2216%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/numeric.py:2241 (allclose) (2 samples, 0.24%)</title><rect x="9.2216%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="311.50"></text></g><g><title>    return np.allclose(off_diagonal_elements, 0) (2 samples, 0.24%)</title><rect x="9.2216%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/linalg.py:45 (is_diagonal) (2 samples, 0.24%)</title><rect x="9.2216%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="355.50"></text></g><g><title>    if is_diagonal(A): (2 samples, 0.24%)</title><rect x="9.2216%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/linalg.py:77 (is_psd_within_tol) (2 samples, 0.24%)</title><rect x="9.2216%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="399.50"></text></g><g><title>            self._nsd_test = eig_util.is_psd_within_tol(-self.value, EIGVAL_TOL) (2 samples, 0.24%)</title><rect x="9.2216%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/constants/constant.py:244 (is_nsd) (2 samples, 0.24%)</title><rect x="9.2216%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="443.50"></text></g><g><title>        result = func(self, *args, **kwargs) (2 samples, 0.24%)</title><rect x="9.2216%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="465.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (2 samples, 0.24%)</title><rect x="9.2216%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="487.50"></text></g><g><title>        return P.is_constant() and P.is_nsd() (2 samples, 0.24%)</title><rect x="9.2216%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="509.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/quad_form.py:74 (is_atom_concave) (2 samples, 0.24%)</title><rect x="9.2216%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="531.50"></text></g><g><title>        elif self.is_atom_concave(): (2 samples, 0.24%)</title><rect x="9.2216%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="553.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:193 (is_concave) (2 samples, 0.24%)</title><rect x="9.2216%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="575.50"></text></g><g><title>        result = func(self, *args, **kwargs) (2 samples, 0.24%)</title><rect x="9.2216%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="597.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (2 samples, 0.24%)</title><rect x="9.2216%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="619.50"></text></g><g><title>        return self.is_constant() or (self.is_convex() and self.is_concave()) (2 samples, 0.24%)</title><rect x="9.2216%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="641.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/expression.py:212 (is_affine) (2 samples, 0.24%)</title><rect x="9.2216%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="663.50"></text></g><g><title>        result = func(self, *args, **kwargs) (2 samples, 0.24%)</title><rect x="9.2216%" y="672" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="685.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (2 samples, 0.24%)</title><rect x="9.2216%" y="694" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="707.50"></text></g><g><title>                if not (arg.is_affine() or (2 samples, 0.24%)</title><rect x="9.2216%" y="716" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="729.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:178 (is_convex) (2 samples, 0.24%)</title><rect x="9.2216%" y="738" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="751.50"></text></g><g><title>        result = func(self, *args, **kwargs) (2 samples, 0.24%)</title><rect x="9.2216%" y="760" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="773.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (2 samples, 0.24%)</title><rect x="9.2216%" y="782" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="795.50"></text></g><g><title>        return self.is_constant() or (self.is_convex() and self.is_concave()) (2 samples, 0.24%)</title><rect x="9.2216%" y="804" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="817.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/expression.py:212 (is_affine) (2 samples, 0.24%)</title><rect x="9.2216%" y="826" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="839.50"></text></g><g><title>        result = func(self, *args, **kwargs) (2 samples, 0.24%)</title><rect x="9.2216%" y="848" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="861.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (2 samples, 0.24%)</title><rect x="9.2216%" y="870" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="883.50"></text></g><g><title>                if not (arg.is_affine() or (2 samples, 0.24%)</title><rect x="9.2216%" y="892" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="905.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:178 (is_convex) (2 samples, 0.24%)</title><rect x="9.2216%" y="914" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="927.50"></text></g><g><title>        result = func(self, *args, **kwargs) (2 samples, 0.24%)</title><rect x="9.2216%" y="936" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="949.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (2 samples, 0.24%)</title><rect x="9.2216%" y="958" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="971.50"></text></g><g><title>        return self.args[0].is_convex() (2 samples, 0.24%)</title><rect x="9.2216%" y="980" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="993.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/objective.py:153 (is_dcp) (2 samples, 0.24%)</title><rect x="9.2216%" y="1002" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1015.50"></text></g><g><title>          expr.is_dcp(dpp) for expr in self.constraints + [self.objective]) (2 samples, 0.24%)</title><rect x="9.2216%" y="1024" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1037.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:257 (&lt;genexpr&gt;) (2 samples, 0.24%)</title><rect x="9.2216%" y="1046" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1059.50"></text></g><g><title>        return all( (2 samples, 0.24%)</title><rect x="9.2216%" y="1068" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1081.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:256 (is_dcp) (2 samples, 0.24%)</title><rect x="9.2216%" y="1090" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1103.50"></text></g><g><title>        result = func(self, *args, **kwargs) (2 samples, 0.24%)</title><rect x="9.2216%" y="1112" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1125.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (2 samples, 0.24%)</title><rect x="9.2216%" y="1134" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1147.50"></text></g><g><title>    if not gp and not problem.is_dcp(): (2 samples, 0.24%)</title><rect x="9.2216%" y="1156" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1169.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/solving_chain.py:107 (_reductions_for_problem_class) (2 samples, 0.24%)</title><rect x="9.2216%" y="1178" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1191.50"></text></g><g><title>    reductions = _reductions_for_problem_class(problem, candidates, gp, solver_opts) (2 samples, 0.24%)</title><rect x="9.2216%" y="1200" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1213.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/solving_chain.py:197 (construct_solving_chain) (2 samples, 0.24%)</title><rect x="9.2216%" y="1222" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1235.50"></text></g><g><title>        return construct_solving_chain(self, candidate_solvers, gp=gp, (2 samples, 0.24%)</title><rect x="9.2216%" y="1244" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1257.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:885 (_construct_chain) (2 samples, 0.24%)</title><rect x="9.2216%" y="1266" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1279.50"></text></g><g><title>            solving_chain = self._construct_chain( (2 samples, 0.24%)</title><rect x="9.2216%" y="1288" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1301.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:633 (get_problem_data) (2 samples, 0.24%)</title><rect x="9.2216%" y="1310" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1323.50"></text></g><g><title>        data, solving_chain, inverse_data = self.get_problem_data( (2 samples, 0.24%)</title><rect x="9.2216%" y="1332" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1345.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:1056 (_solve) (2 samples, 0.24%)</title><rect x="9.2216%" y="1354" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1367.50"></text></g><g><title>        return solve_func(self, *args, **kwargs) (2 samples, 0.24%)</title><rect x="9.2216%" y="1376" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1389.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:495 (solve) (2 samples, 0.24%)</title><rect x="9.2216%" y="1398" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1411.50"></text></g><g><title>        cvx_prob.solve(solver=solver, **solver_kwargs) (2 samples, 0.24%)</title><rect x="9.2216%" y="1420" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1433.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:200 (_solve_cvx) (2 samples, 0.24%)</title><rect x="9.2216%" y="1442" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1455.50"></text></g><g><title>            result = self._solve_cvx(canonical_form, solver, **kwargs) (2 samples, 0.24%)</title><rect x="9.2216%" y="1464" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1477.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:93 (decompose) (2 samples, 0.24%)</title><rect x="9.2216%" y="1486" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1499.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_rel=1e-6, eps_abs=1e-6) (2 samples, 0.24%)</title><rect x="9.2216%" y="1508" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1521.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:277 (_osd_l2_l1d2_constrained) (2 samples, 0.24%)</title><rect x="9.2216%" y="1530" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1543.50"></text></g><g><title>        res = _osd_l2_l1d2_constrained( (2 samples, 0.24%)</title><rect x="9.2216%" y="1552" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1565.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:259 (l2_l1d2_constrained) (2 samples, 0.24%)</title><rect x="9.2216%" y="1574" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1587.50"></text></g><g><title>        out = l2_l1d2_constrained(y, w1=weight, solver=solver) (2 samples, 0.24%)</title><rect x="9.2216%" y="1596" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1609.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:373 (get_l2_l1d2) (2 samples, 0.24%)</title><rect x="9.2216%" y="1618" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1631.50"></text></g><g><title>            self.get_l2_l1d2(y_rs, weight=weight, solver=solver) (2 samples, 0.24%)</title><rect x="9.2216%" y="1640" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1653.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:139 (pointmass_detection) (2 samples, 0.24%)</title><rect x="9.2216%" y="1662" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1675.50"></text></g><g><title>        self.pointmass_detection( (2 samples, 0.24%)</title><rect x="9.2216%" y="1684" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1697.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:75 (check_clipping) (2 samples, 0.24%)</title><rect x="9.2216%" y="1706" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1719.50"></text></g><g><title>        self.clipping_analysis.check_clipping( (2 samples, 0.24%)</title><rect x="9.2216%" y="1728" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1741.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:868 (clipping_check) (2 samples, 0.24%)</title><rect x="9.2216%" y="1750" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1763.50"></text></g><g><title>            self.clipping_check(solver=solver_convex) (2 samples, 0.24%)</title><rect x="9.2216%" y="1772" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1785.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:375 (run_pipeline) (2 samples, 0.24%)</title><rect x="9.2216%" y="1794" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1807.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="9.2216%" y="1816" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1829.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="9.2216%" y="1838" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="77" fg:w="2"/><text x="9.4716%" y="1851.50"></text></g><g><title>    return ufunc.reduce(obj, axis, dtype, out, **passkwargs) (8 samples, 0.96%)</title><rect x="8.8623%" y="144" width="0.9581%" height="21" fill="rgb(255,235,235)" fg:x="74" fg:w="8"/><text x="9.1123%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/fromnumeric.py:88 (_wrapreduction) (8 samples, 0.96%)</title><rect x="8.8623%" y="166" width="0.9581%" height="21" fill="rgb(255,235,235)" fg:x="74" fg:w="8"/><text x="9.1123%" y="179.50"></text></g><g><title>    return _wrapreduction(a, np.logical_and, &apos;all&apos;, axis, None, out, (5 samples, 0.60%)</title><rect x="9.2216%" y="188" width="0.5988%" height="21" fill="rgb(255,238,238)" fg:x="77" fg:w="5"/><text x="9.4716%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/fromnumeric.py:2504 (all) (5 samples, 0.60%)</title><rect x="9.2216%" y="210" width="0.5988%" height="21" fill="rgb(255,238,238)" fg:x="77" fg:w="5"/><text x="9.4716%" y="223.50"></text></g><g><title>    res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan)) (3 samples, 0.36%)</title><rect x="9.4611%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/numeric.py:2241 (allclose) (3 samples, 0.36%)</title><rect x="9.4611%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="267.50"></text></g><g><title>    return np.allclose(off_diagonal_elements, 0) (3 samples, 0.36%)</title><rect x="9.4611%" y="276" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/linalg.py:45 (is_diagonal) (3 samples, 0.36%)</title><rect x="9.4611%" y="298" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="311.50"></text></g><g><title>    if is_diagonal(A): (3 samples, 0.36%)</title><rect x="9.4611%" y="320" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/linalg.py:77 (is_psd_within_tol) (3 samples, 0.36%)</title><rect x="9.4611%" y="342" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="355.50"></text></g><g><title>            self._nsd_test = eig_util.is_psd_within_tol(-self.value, EIGVAL_TOL) (3 samples, 0.36%)</title><rect x="9.4611%" y="364" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/constants/constant.py:244 (is_nsd) (3 samples, 0.36%)</title><rect x="9.4611%" y="386" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="399.50"></text></g><g><title>        result = func(self, *args, **kwargs) (3 samples, 0.36%)</title><rect x="9.4611%" y="408" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (3 samples, 0.36%)</title><rect x="9.4611%" y="430" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="443.50"></text></g><g><title>        return P.is_constant() and P.is_nsd() (3 samples, 0.36%)</title><rect x="9.4611%" y="452" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="465.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/quad_form.py:74 (is_atom_concave) (3 samples, 0.36%)</title><rect x="9.4611%" y="474" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="487.50"></text></g><g><title>        elif self.is_atom_concave(): (3 samples, 0.36%)</title><rect x="9.4611%" y="496" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="509.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:193 (is_concave) (3 samples, 0.36%)</title><rect x="9.4611%" y="518" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="531.50"></text></g><g><title>        result = func(self, *args, **kwargs) (3 samples, 0.36%)</title><rect x="9.4611%" y="540" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="553.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (3 samples, 0.36%)</title><rect x="9.4611%" y="562" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="575.50"></text></g><g><title>        return self.is_constant() or (self.is_convex() and self.is_concave()) (3 samples, 0.36%)</title><rect x="9.4611%" y="584" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="597.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/expression.py:212 (is_affine) (3 samples, 0.36%)</title><rect x="9.4611%" y="606" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="619.50"></text></g><g><title>        result = func(self, *args, **kwargs) (3 samples, 0.36%)</title><rect x="9.4611%" y="628" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="641.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (3 samples, 0.36%)</title><rect x="9.4611%" y="650" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="663.50"></text></g><g><title>                if not (arg.is_affine() or (3 samples, 0.36%)</title><rect x="9.4611%" y="672" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="685.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:178 (is_convex) (3 samples, 0.36%)</title><rect x="9.4611%" y="694" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="707.50"></text></g><g><title>        result = func(self, *args, **kwargs) (3 samples, 0.36%)</title><rect x="9.4611%" y="716" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="729.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (3 samples, 0.36%)</title><rect x="9.4611%" y="738" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="751.50"></text></g><g><title>        return self.is_constant() or (self.is_convex() and self.is_concave()) (3 samples, 0.36%)</title><rect x="9.4611%" y="760" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="773.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/expression.py:212 (is_affine) (3 samples, 0.36%)</title><rect x="9.4611%" y="782" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="795.50"></text></g><g><title>        result = func(self, *args, **kwargs) (3 samples, 0.36%)</title><rect x="9.4611%" y="804" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="817.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (3 samples, 0.36%)</title><rect x="9.4611%" y="826" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="839.50"></text></g><g><title>                if not (arg.is_affine() or (3 samples, 0.36%)</title><rect x="9.4611%" y="848" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="861.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:178 (is_convex) (3 samples, 0.36%)</title><rect x="9.4611%" y="870" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="883.50"></text></g><g><title>        result = func(self, *args, **kwargs) (3 samples, 0.36%)</title><rect x="9.4611%" y="892" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="905.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (3 samples, 0.36%)</title><rect x="9.4611%" y="914" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="927.50"></text></g><g><title>        return self.args[0].is_convex() (3 samples, 0.36%)</title><rect x="9.4611%" y="936" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="949.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/objective.py:153 (is_dcp) (3 samples, 0.36%)</title><rect x="9.4611%" y="958" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="971.50"></text></g><g><title>          expr.is_dcp(dpp) for expr in self.constraints + [self.objective]) (3 samples, 0.36%)</title><rect x="9.4611%" y="980" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="993.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:257 (&lt;genexpr&gt;) (3 samples, 0.36%)</title><rect x="9.4611%" y="1002" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1015.50"></text></g><g><title>        return all( (3 samples, 0.36%)</title><rect x="9.4611%" y="1024" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1037.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:256 (is_dcp) (3 samples, 0.36%)</title><rect x="9.4611%" y="1046" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1059.50"></text></g><g><title>        result = func(self, *args, **kwargs) (3 samples, 0.36%)</title><rect x="9.4611%" y="1068" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1081.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (3 samples, 0.36%)</title><rect x="9.4611%" y="1090" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1103.50"></text></g><g><title>    if not gp and not problem.is_dcp(): (3 samples, 0.36%)</title><rect x="9.4611%" y="1112" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1125.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/solving_chain.py:107 (_reductions_for_problem_class) (3 samples, 0.36%)</title><rect x="9.4611%" y="1134" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1147.50"></text></g><g><title>    reductions = _reductions_for_problem_class(problem, candidates, gp, solver_opts) (3 samples, 0.36%)</title><rect x="9.4611%" y="1156" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1169.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/solving_chain.py:197 (construct_solving_chain) (3 samples, 0.36%)</title><rect x="9.4611%" y="1178" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1191.50"></text></g><g><title>        return construct_solving_chain(self, candidate_solvers, gp=gp, (3 samples, 0.36%)</title><rect x="9.4611%" y="1200" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1213.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:885 (_construct_chain) (3 samples, 0.36%)</title><rect x="9.4611%" y="1222" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1235.50"></text></g><g><title>            solving_chain = self._construct_chain( (3 samples, 0.36%)</title><rect x="9.4611%" y="1244" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1257.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:633 (get_problem_data) (3 samples, 0.36%)</title><rect x="9.4611%" y="1266" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1279.50"></text></g><g><title>        data, solving_chain, inverse_data = self.get_problem_data( (3 samples, 0.36%)</title><rect x="9.4611%" y="1288" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1301.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:1056 (_solve) (3 samples, 0.36%)</title><rect x="9.4611%" y="1310" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1323.50"></text></g><g><title>        return solve_func(self, *args, **kwargs) (3 samples, 0.36%)</title><rect x="9.4611%" y="1332" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1345.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:495 (solve) (3 samples, 0.36%)</title><rect x="9.4611%" y="1354" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1367.50"></text></g><g><title>        cvx_prob.solve(solver=solver, **solver_kwargs) (3 samples, 0.36%)</title><rect x="9.4611%" y="1376" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1389.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:200 (_solve_cvx) (3 samples, 0.36%)</title><rect x="9.4611%" y="1398" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1411.50"></text></g><g><title>            result = self._solve_cvx(canonical_form, solver, **kwargs) (3 samples, 0.36%)</title><rect x="9.4611%" y="1420" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1433.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:93 (decompose) (3 samples, 0.36%)</title><rect x="9.4611%" y="1442" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1455.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_rel=1e-6, eps_abs=1e-6) (3 samples, 0.36%)</title><rect x="9.4611%" y="1464" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1477.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:277 (_osd_l2_l1d2_constrained) (3 samples, 0.36%)</title><rect x="9.4611%" y="1486" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1499.50"></text></g><g><title>        res = _osd_l2_l1d2_constrained( (3 samples, 0.36%)</title><rect x="9.4611%" y="1508" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1521.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:259 (l2_l1d2_constrained) (3 samples, 0.36%)</title><rect x="9.4611%" y="1530" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1543.50"></text></g><g><title>        out = l2_l1d2_constrained(y, w1=weight, solver=solver) (3 samples, 0.36%)</title><rect x="9.4611%" y="1552" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1565.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:373 (get_l2_l1d2) (3 samples, 0.36%)</title><rect x="9.4611%" y="1574" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1587.50"></text></g><g><title>            self.get_l2_l1d2(y_rs, weight=weight, solver=solver) (3 samples, 0.36%)</title><rect x="9.4611%" y="1596" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1609.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:139 (pointmass_detection) (3 samples, 0.36%)</title><rect x="9.4611%" y="1618" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1631.50"></text></g><g><title>        self.pointmass_detection( (3 samples, 0.36%)</title><rect x="9.4611%" y="1640" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1653.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:75 (check_clipping) (3 samples, 0.36%)</title><rect x="9.4611%" y="1662" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1675.50"></text></g><g><title>        self.clipping_analysis.check_clipping( (3 samples, 0.36%)</title><rect x="9.4611%" y="1684" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1697.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:868 (clipping_check) (3 samples, 0.36%)</title><rect x="9.4611%" y="1706" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1719.50"></text></g><g><title>            self.clipping_check(solver=solver_convex) (3 samples, 0.36%)</title><rect x="9.4611%" y="1728" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1741.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:375 (run_pipeline) (3 samples, 0.36%)</title><rect x="9.4611%" y="1750" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1763.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="9.4611%" y="1772" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1785.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="9.4611%" y="1794" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="79" fg:w="3"/><text x="9.7111%" y="1807.50"></text></g><g><title>        return self.__class__((self.data, (self.col, self.row)), (2 samples, 0.24%)</title><rect x="9.9401%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:306 (transpose) (2 samples, 0.24%)</title><rect x="9.9401%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="311.50"></text></g><g><title>        return self.transpose() (2 samples, 0.24%)</title><rect x="9.9401%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:727 (T) (2 samples, 0.24%)</title><rect x="9.9401%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="355.50"></text></g><g><title>        r_dual = np.linalg.norm(P @ zk1 + q + A.T @ nuk1 + rho_vec * uk1, ord=np.inf) (2 samples, 0.24%)</title><rect x="9.9401%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:207 (admm) (2 samples, 0.24%)</title><rect x="9.9401%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="399.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="9.9401%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="9.9401%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="443.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="9.9401%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="465.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="9.9401%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="487.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="9.9401%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="509.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="9.9401%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="531.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="9.9401%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="9.9401%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="575.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="9.9401%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="9.9401%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="619.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="9.9401%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="9.9401%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="663.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="9.9401%" y="672" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="9.9401%" y="694" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="707.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="9.9401%" y="716" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="729.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="9.9401%" y="738" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="751.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="9.9401%" y="760" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="773.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="9.9401%" y="782" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="83" fg:w="2"/><text x="10.1901%" y="795.50"></text></g><g><title>            if self.row.max() &gt;= self.shape[0]: (3 samples, 0.36%)</title><rect x="9.9401%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="83" fg:w="3"/><text x="10.1901%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:290 (_check) (3 samples, 0.36%)</title><rect x="9.9401%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="83" fg:w="3"/><text x="10.1901%" y="223.50"></text></g><g><title>        self._check() (3 samples, 0.36%)</title><rect x="9.9401%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="83" fg:w="3"/><text x="10.1901%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:204 (__init__) (3 samples, 0.36%)</title><rect x="9.9401%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="83" fg:w="3"/><text x="10.1901%" y="267.50"></text></g><g><title>        r_prim = np.linalg.norm(A @ zk1 - b, ord=np.inf) (3 samples, 0.36%)</title><rect x="10.4192%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:206 (admm) (3 samples, 0.36%)</title><rect x="10.4192%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="267.50"></text></g><g><title>                self._iterates = admm.admm( (3 samples, 0.36%)</title><rect x="10.4192%" y="276" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (3 samples, 0.36%)</title><rect x="10.4192%" y="298" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="311.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (3 samples, 0.36%)</title><rect x="10.4192%" y="320" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (3 samples, 0.36%)</title><rect x="10.4192%" y="342" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="355.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (3 samples, 0.36%)</title><rect x="10.4192%" y="364" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (3 samples, 0.36%)</title><rect x="10.4192%" y="386" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="399.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (3 samples, 0.36%)</title><rect x="10.4192%" y="408" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="10.4192%" y="430" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="443.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="10.4192%" y="452" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="10.4192%" y="474" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="487.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="10.4192%" y="496" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (3 samples, 0.36%)</title><rect x="10.4192%" y="518" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="531.50"></text></g><g><title>            self.capacity_analysis.run( (3 samples, 0.36%)</title><rect x="10.4192%" y="540" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (3 samples, 0.36%)</title><rect x="10.4192%" y="562" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="575.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (3 samples, 0.36%)</title><rect x="10.4192%" y="584" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (3 samples, 0.36%)</title><rect x="10.4192%" y="606" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="619.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="10.4192%" y="628" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="10.4192%" y="650" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="87" fg:w="3"/><text x="10.6692%" y="663.50"></text></g><g><title>            return abs(x).max(axis=axis, keepdims=keepdims) (4 samples, 0.48%)</title><rect x="10.4192%" y="188" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="87" fg:w="4"/><text x="10.6692%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/linalg/linalg.py:2571 (norm) (4 samples, 0.48%)</title><rect x="10.4192%" y="210" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="87" fg:w="4"/><text x="10.6692%" y="223.50"></text></g><g><title>    return umr_maximum(a, axis, None, out, keepdims, initial, where) (10 samples, 1.20%)</title><rect x="9.8204%" y="144" width="1.1976%" height="21" fill="rgb(255,233,233)" fg:x="82" fg:w="10"/><text x="10.0704%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/_methods.py:41 (_amax) (10 samples, 1.20%)</title><rect x="9.8204%" y="166" width="1.1976%" height="21" fill="rgb(255,233,233)" fg:x="82" fg:w="10"/><text x="10.0704%" y="179.50"></text></g><g><title>    uniques, codes = table.factorize( (2 samples, 0.24%)</title><rect x="11.4970%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="96" fg:w="2"/><text x="11.7470%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/core/algorithms.py:595 (factorize_array) (2 samples, 0.24%)</title><rect x="11.4970%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="96" fg:w="2"/><text x="11.7470%" y="179.50"></text></g><g><title>        codes, uniques = factorize_array( (2 samples, 0.24%)</title><rect x="11.4970%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="96" fg:w="2"/><text x="11.7470%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/core/algorithms.py:795 (factorize) (2 samples, 0.24%)</title><rect x="11.4970%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="96" fg:w="2"/><text x="11.7470%" y="223.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose) (3 samples, 0.36%)</title><rect x="11.7365%" y="1420" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="98" fg:w="3"/><text x="11.9865%" y="1433.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:163 (_osd_tl1_l2d2p365) (3 samples, 0.36%)</title><rect x="11.7365%" y="1442" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="98" fg:w="3"/><text x="11.9865%" y="1455.50"></text></g><g><title>        res = _osd_tl1_l2d2p365( (3 samples, 0.36%)</title><rect x="11.7365%" y="1464" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="98" fg:w="3"/><text x="11.9865%" y="1477.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:157 (tl1_l2d2p365) (3 samples, 0.36%)</title><rect x="11.7365%" y="1486" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="98" fg:w="3"/><text x="11.9865%" y="1499.50"></text></g><g><title>    xfin = isfinite(x) (72 samples, 8.62%)</title><rect x="11.7365%" y="144" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="157.50">    xfi..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/numeric.py:2348 (isclose) (72 samples, 8.62%)</title><rect x="11.7365%" y="166" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="179.50">/home/ec..</text></g><g><title>    res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan)) (72 samples, 8.62%)</title><rect x="11.7365%" y="188" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="201.50">    res..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/numeric.py:2241 (allclose) (72 samples, 8.62%)</title><rect x="11.7365%" y="210" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="223.50">/home/ec..</text></g><g><title>    return np.allclose(off_diagonal_elements, 0) (72 samples, 8.62%)</title><rect x="11.7365%" y="232" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="245.50">    ret..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/linalg.py:45 (is_diagonal) (72 samples, 8.62%)</title><rect x="11.7365%" y="254" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="267.50">/home/ec..</text></g><g><title>    if is_diagonal(A): (72 samples, 8.62%)</title><rect x="11.7365%" y="276" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="289.50">    if ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/linalg.py:77 (is_psd_within_tol) (72 samples, 8.62%)</title><rect x="11.7365%" y="298" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="311.50">/home/ec..</text></g><g><title>            self._nsd_test = eig_util.is_psd_within_tol(-self.value, EIGVAL_TOL) (72 samples, 8.62%)</title><rect x="11.7365%" y="320" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="333.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/constants/constant.py:244 (is_nsd) (72 samples, 8.62%)</title><rect x="11.7365%" y="342" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="355.50">/home/ec..</text></g><g><title>        result = func(self, *args, **kwargs) (72 samples, 8.62%)</title><rect x="11.7365%" y="364" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="377.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (72 samples, 8.62%)</title><rect x="11.7365%" y="386" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="399.50">/home/ec..</text></g><g><title>        return P.is_constant() and P.is_nsd() (72 samples, 8.62%)</title><rect x="11.7365%" y="408" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="421.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/quad_form.py:74 (is_atom_concave) (72 samples, 8.62%)</title><rect x="11.7365%" y="430" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="443.50">/home/ec..</text></g><g><title>        elif self.is_atom_concave(): (72 samples, 8.62%)</title><rect x="11.7365%" y="452" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="465.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:193 (is_concave) (72 samples, 8.62%)</title><rect x="11.7365%" y="474" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="487.50">/home/ec..</text></g><g><title>        result = func(self, *args, **kwargs) (72 samples, 8.62%)</title><rect x="11.7365%" y="496" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="509.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (72 samples, 8.62%)</title><rect x="11.7365%" y="518" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="531.50">/home/ec..</text></g><g><title>        return self.is_constant() or (self.is_convex() and self.is_concave()) (72 samples, 8.62%)</title><rect x="11.7365%" y="540" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="553.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/expression.py:212 (is_affine) (72 samples, 8.62%)</title><rect x="11.7365%" y="562" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="575.50">/home/ec..</text></g><g><title>        result = func(self, *args, **kwargs) (72 samples, 8.62%)</title><rect x="11.7365%" y="584" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="597.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (72 samples, 8.62%)</title><rect x="11.7365%" y="606" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="619.50">/home/ec..</text></g><g><title>                if not (arg.is_affine() or (72 samples, 8.62%)</title><rect x="11.7365%" y="628" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="641.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:178 (is_convex) (72 samples, 8.62%)</title><rect x="11.7365%" y="650" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="663.50">/home/ec..</text></g><g><title>        result = func(self, *args, **kwargs) (72 samples, 8.62%)</title><rect x="11.7365%" y="672" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="685.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (72 samples, 8.62%)</title><rect x="11.7365%" y="694" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="707.50">/home/ec..</text></g><g><title>        return self.is_constant() or (self.is_convex() and self.is_concave()) (72 samples, 8.62%)</title><rect x="11.7365%" y="716" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="729.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/expression.py:212 (is_affine) (72 samples, 8.62%)</title><rect x="11.7365%" y="738" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="751.50">/home/ec..</text></g><g><title>        result = func(self, *args, **kwargs) (72 samples, 8.62%)</title><rect x="11.7365%" y="760" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="773.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (72 samples, 8.62%)</title><rect x="11.7365%" y="782" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="795.50">/home/ec..</text></g><g><title>                if not (arg.is_affine() or (72 samples, 8.62%)</title><rect x="11.7365%" y="804" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="817.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:178 (is_convex) (72 samples, 8.62%)</title><rect x="11.7365%" y="826" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="839.50">/home/ec..</text></g><g><title>        result = func(self, *args, **kwargs) (72 samples, 8.62%)</title><rect x="11.7365%" y="848" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="861.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (72 samples, 8.62%)</title><rect x="11.7365%" y="870" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="883.50">/home/ec..</text></g><g><title>        return self.args[0].is_convex() (72 samples, 8.62%)</title><rect x="11.7365%" y="892" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="905.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/objective.py:153 (is_dcp) (72 samples, 8.62%)</title><rect x="11.7365%" y="914" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="927.50">/home/ec..</text></g><g><title>          expr.is_dcp(dpp) for expr in self.constraints + [self.objective]) (72 samples, 8.62%)</title><rect x="11.7365%" y="936" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="949.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:257 (&lt;genexpr&gt;) (72 samples, 8.62%)</title><rect x="11.7365%" y="958" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="971.50">/home/ec..</text></g><g><title>        return all( (72 samples, 8.62%)</title><rect x="11.7365%" y="980" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="993.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:256 (is_dcp) (72 samples, 8.62%)</title><rect x="11.7365%" y="1002" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1015.50">/home/ec..</text></g><g><title>        result = func(self, *args, **kwargs) (72 samples, 8.62%)</title><rect x="11.7365%" y="1024" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1037.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (72 samples, 8.62%)</title><rect x="11.7365%" y="1046" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1059.50">/home/ec..</text></g><g><title>    if not gp and not problem.is_dcp(): (72 samples, 8.62%)</title><rect x="11.7365%" y="1068" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1081.50">    if ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/solving_chain.py:107 (_reductions_for_problem_class) (72 samples, 8.62%)</title><rect x="11.7365%" y="1090" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1103.50">/home/ec..</text></g><g><title>    reductions = _reductions_for_problem_class(problem, candidates, gp, solver_opts) (72 samples, 8.62%)</title><rect x="11.7365%" y="1112" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1125.50">    red..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/solving_chain.py:197 (construct_solving_chain) (72 samples, 8.62%)</title><rect x="11.7365%" y="1134" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1147.50">/home/ec..</text></g><g><title>        return construct_solving_chain(self, candidate_solvers, gp=gp, (72 samples, 8.62%)</title><rect x="11.7365%" y="1156" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1169.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:885 (_construct_chain) (72 samples, 8.62%)</title><rect x="11.7365%" y="1178" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1191.50">/home/ec..</text></g><g><title>            solving_chain = self._construct_chain( (72 samples, 8.62%)</title><rect x="11.7365%" y="1200" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1213.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:633 (get_problem_data) (72 samples, 8.62%)</title><rect x="11.7365%" y="1222" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1235.50">/home/ec..</text></g><g><title>        data, solving_chain, inverse_data = self.get_problem_data( (72 samples, 8.62%)</title><rect x="11.7365%" y="1244" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1257.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:1056 (_solve) (72 samples, 8.62%)</title><rect x="11.7365%" y="1266" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1279.50">/home/ec..</text></g><g><title>        return solve_func(self, *args, **kwargs) (72 samples, 8.62%)</title><rect x="11.7365%" y="1288" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1301.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:495 (solve) (72 samples, 8.62%)</title><rect x="11.7365%" y="1310" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1323.50">/home/ec..</text></g><g><title>        cvx_prob.solve(solver=solver, **solver_kwargs) (72 samples, 8.62%)</title><rect x="11.7365%" y="1332" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1345.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:200 (_solve_cvx) (72 samples, 8.62%)</title><rect x="11.7365%" y="1354" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1367.50">/home/ec..</text></g><g><title>            result = self._solve_cvx(canonical_form, solver, **kwargs) (72 samples, 8.62%)</title><rect x="11.7365%" y="1376" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1389.50">       ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:93 (decompose) (72 samples, 8.62%)</title><rect x="11.7365%" y="1398" width="8.6228%" height="21" fill="rgb(255,205,205)" fg:x="98" fg:w="72"/><text x="11.9865%" y="1411.50">/home/ec..</text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_rel=1e-6, eps_abs=1e-6) (69 samples, 8.26%)</title><rect x="12.0958%" y="1420" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1433.50">    pro..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:277 (_osd_l2_l1d2_constrained) (69 samples, 8.26%)</title><rect x="12.0958%" y="1442" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1455.50">/home/ec..</text></g><g><title>        res = _osd_l2_l1d2_constrained( (69 samples, 8.26%)</title><rect x="12.0958%" y="1464" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1477.50">       ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:259 (l2_l1d2_constrained) (69 samples, 8.26%)</title><rect x="12.0958%" y="1486" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1499.50">/home/ec..</text></g><g><title>        out = l2_l1d2_constrained(y, w1=weight, solver=solver) (69 samples, 8.26%)</title><rect x="12.0958%" y="1508" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1521.50">       ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:373 (get_l2_l1d2) (69 samples, 8.26%)</title><rect x="12.0958%" y="1530" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1543.50">/home/ec..</text></g><g><title>            self.get_l2_l1d2(y_rs, weight=weight, solver=solver) (69 samples, 8.26%)</title><rect x="12.0958%" y="1552" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1565.50">       ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:139 (pointmass_detection) (69 samples, 8.26%)</title><rect x="12.0958%" y="1574" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1587.50">/home/ec..</text></g><g><title>        self.pointmass_detection( (69 samples, 8.26%)</title><rect x="12.0958%" y="1596" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1609.50">       ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:75 (check_clipping) (69 samples, 8.26%)</title><rect x="12.0958%" y="1618" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1631.50">/home/ec..</text></g><g><title>        self.clipping_analysis.check_clipping( (69 samples, 8.26%)</title><rect x="12.0958%" y="1640" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1653.50">       ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:868 (clipping_check) (69 samples, 8.26%)</title><rect x="12.0958%" y="1662" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1675.50">/home/ec..</text></g><g><title>            self.clipping_check(solver=solver_convex) (69 samples, 8.26%)</title><rect x="12.0958%" y="1684" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1697.50">       ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:375 (run_pipeline) (69 samples, 8.26%)</title><rect x="12.0958%" y="1706" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1719.50">/home/ec..</text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (69 samples, 8.26%)</title><rect x="12.0958%" y="1728" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1741.50">       ..</text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (69 samples, 8.26%)</title><rect x="12.0958%" y="1750" width="8.2635%" height="21" fill="rgb(255,206,206)" fg:x="101" fg:w="69"/><text x="12.3458%" y="1763.50">/home/ec..</text></g><g><title>        return self._mul_dispatch(other) (2 samples, 0.24%)</title><rect x="21.0778%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="176" fg:w="2"/><text x="21.3278%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:624 (__matmul__) (2 samples, 0.24%)</title><rect x="21.0778%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="176" fg:w="2"/><text x="21.3278%" y="267.50"></text></g><g><title>        coo_matvec(self.nnz, self.row, self.col, self.data, other, result) (3 samples, 0.36%)</title><rect x="21.0778%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="176" fg:w="3"/><text x="21.3278%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:591 (_mul_vector) (3 samples, 0.36%)</title><rect x="21.0778%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="176" fg:w="3"/><text x="21.3278%" y="179.50"></text></g><g><title>                return self._mul_vector(other) (3 samples, 0.36%)</title><rect x="21.0778%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="176" fg:w="3"/><text x="21.3278%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:522 (_mul_dispatch) (3 samples, 0.36%)</title><rect x="21.0778%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="176" fg:w="3"/><text x="21.3278%" y="223.50"></text></g><g><title>        idx_dtype = self._get_index_dtype((self.row, self.col), maxval=max(self.shape)) (2 samples, 0.24%)</title><rect x="22.9940%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="192" fg:w="2"/><text x="23.2440%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:284 (_check) (2 samples, 0.24%)</title><rect x="22.9940%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="192" fg:w="2"/><text x="23.2440%" y="267.50"></text></g><g><title>        self._check() (2 samples, 0.24%)</title><rect x="22.9940%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="192" fg:w="2"/><text x="23.2440%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:204 (__init__) (2 samples, 0.24%)</title><rect x="22.9940%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="192" fg:w="2"/><text x="23.2440%" y="311.50"></text></g><g><title>    return coo_matrix((data, (row, col)), shape=shape).asformat(format) (2 samples, 0.24%)</title><rect x="23.2335%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="194" fg:w="2"/><text x="23.4835%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_construct.py:704 (bmat) (2 samples, 0.24%)</title><rect x="23.2335%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="194" fg:w="2"/><text x="23.4835%" y="311.50"></text></g><g><title>                idx_dtype = self._get_index_dtype((row, col), maxval=max(self.shape), check_contents=True) (3 samples, 0.36%)</title><rect x="23.2335%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="194" fg:w="3"/><text x="23.4835%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:163 (__init__) (3 samples, 0.36%)</title><rect x="23.2335%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="194" fg:w="3"/><text x="23.4835%" y="267.50"></text></g><g><title>        if not np.can_cast(arr.dtype, np.int32): (8 samples, 0.96%)</title><rect x="22.8743%" y="144" width="0.9581%" height="21" fill="rgb(255,235,235)" fg:x="191" fg:w="8"/><text x="23.1243%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_sputils.py:184 (get_index_dtype) (8 samples, 0.96%)</title><rect x="22.8743%" y="166" width="0.9581%" height="21" fill="rgb(255,235,235)" fg:x="191" fg:w="8"/><text x="23.1243%" y="179.50"></text></g><g><title>        return get_index_dtype(arrays, maxval, (check_contents and not self._is_array)) (8 samples, 0.96%)</title><rect x="22.8743%" y="188" width="0.9581%" height="21" fill="rgb(255,235,235)" fg:x="191" fg:w="8"/><text x="23.1243%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:1289 (_get_index_dtype) (8 samples, 0.96%)</title><rect x="22.8743%" y="210" width="0.9581%" height="21" fill="rgb(255,235,235)" fg:x="191" fg:w="8"/><text x="23.1243%" y="223.50"></text></g><g><title>                    idx_dtype = self._get_index_dtype((indices, indptr), (2 samples, 0.24%)</title><rect x="23.5928%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="197" fg:w="2"/><text x="23.8428%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_compressed.py:64 (__init__) (2 samples, 0.24%)</title><rect x="23.5928%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="197" fg:w="2"/><text x="23.8428%" y="267.50"></text></g><g><title>            return self.__class__((data, self.indices.copy(), (2 samples, 0.24%)</title><rect x="23.5928%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="197" fg:w="2"/><text x="23.8428%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_compressed.py:1229 (_with_data) (2 samples, 0.24%)</title><rect x="23.5928%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="197" fg:w="2"/><text x="23.8428%" y="311.50"></text></g><g><title>        indptr, indices, data = get_csr_submatrix( (2 samples, 0.24%)</title><rect x="24.0719%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="201" fg:w="2"/><text x="24.3219%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_compressed.py:809 (_get_submatrix) (2 samples, 0.24%)</title><rect x="24.0719%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="201" fg:w="2"/><text x="24.3219%" y="179.50"></text></g><g><title>            return self._get_submatrix(major, minor, copy=True) (2 samples, 0.24%)</title><rect x="24.0719%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="201" fg:w="2"/><text x="24.3219%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_compressed.py:664 (_get_sliceXslice) (2 samples, 0.24%)</title><rect x="24.0719%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="201" fg:w="2"/><text x="24.3219%" y="223.50"></text></g><g><title>                return self._get_sliceXslice(row, col) (2 samples, 0.24%)</title><rect x="24.0719%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="201" fg:w="2"/><text x="24.3219%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_index.py:66 (__getitem__) (2 samples, 0.24%)</title><rect x="24.0719%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="201" fg:w="2"/><text x="24.3219%" y="267.50"></text></g><g><title>    return dia_matrix((data, diags), shape=(m, n)).asformat(format) (2 samples, 0.24%)</title><rect x="24.6707%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_construct.py:70 (spdiags) (2 samples, 0.24%)</title><rect x="24.6707%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="311.50"></text></g><g><title>    return spdiags(diags, k, m, n).asformat(format) (2 samples, 0.24%)</title><rect x="24.6707%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_construct.py:282 (eye) (2 samples, 0.24%)</title><rect x="24.6707%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="355.50"></text></g><g><title>            m1 = sp.eye(m=T - 2, n=T, k=0) (2 samples, 0.24%)</title><rect x="24.6707%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/components/base_graph_class.py:115 (_make_A) (2 samples, 0.24%)</title><rect x="24.6707%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="399.50"></text></g><g><title>            self._make_A() (2 samples, 0.24%)</title><rect x="24.6707%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/components/base_graph_class.py:61 (prepare_attributes) (2 samples, 0.24%)</title><rect x="24.6707%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="443.50"></text></g><g><title>            c.prepare_attributes(T, p) (2 samples, 0.24%)</title><rect x="24.6707%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="465.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:25 (__init__) (2 samples, 0.24%)</title><rect x="24.6707%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="487.50"></text></g><g><title>    problem = Problem(signal, classes, use_set=use_ixs) (2 samples, 0.24%)</title><rect x="24.6707%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:161 (_osd_tl1_l2d2p365) (2 samples, 0.24%)</title><rect x="24.6707%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="531.50"></text></g><g><title>        res = _osd_tl1_l2d2p365( (2 samples, 0.24%)</title><rect x="24.6707%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:157 (tl1_l2d2p365) (2 samples, 0.24%)</title><rect x="24.6707%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="206" fg:w="2"/><text x="24.9207%" y="575.50"></text></g><g><title>        mask[1:] = aux[1:] != aux[:-1] (3 samples, 0.36%)</title><rect x="24.6707%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="206" fg:w="3"/><text x="24.9207%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/lib/arraysetops.py:352 (_unique1d) (3 samples, 0.36%)</title><rect x="24.6707%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="206" fg:w="3"/><text x="24.9207%" y="179.50"></text></g><g><title>        ret = _unique1d(ar, return_index, return_inverse, return_counts, (3 samples, 0.36%)</title><rect x="24.6707%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="206" fg:w="3"/><text x="24.9207%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/lib/arraysetops.py:274 (unique) (3 samples, 0.36%)</title><rect x="24.6707%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="206" fg:w="3"/><text x="24.9207%" y="223.50"></text></g><g><title>        if len(np.unique(self.offsets)) != len(self.offsets): (3 samples, 0.36%)</title><rect x="24.6707%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="206" fg:w="3"/><text x="24.9207%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_dia.py:156 (__init__) (3 samples, 0.36%)</title><rect x="24.6707%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="206" fg:w="3"/><text x="24.9207%" y="267.50"></text></g><g><title>        mask &amp;= (self.data != 0) (3 samples, 0.36%)</title><rect x="25.0299%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="209" fg:w="3"/><text x="25.2799%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_dia.py:402 (tocoo) (2 samples, 0.24%)</title><rect x="25.1497%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="179.50"></text></g><g><title>            a = a.tocoo() (2 samples, 0.24%)</title><rect x="25.1497%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_construct.py:759 (block_diag) (2 samples, 0.24%)</title><rect x="25.1497%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="223.50"></text></g><g><title>        Pz = sp.block_diag([d[&apos;Pz&apos;] for d in dicts]) (2 samples, 0.24%)</title><rect x="25.1497%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:39 (make_graph_form) (2 samples, 0.24%)</title><rect x="25.1497%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="267.50"></text></g><g><title>            canonical_form = self.make_graph_form() (2 samples, 0.24%)</title><rect x="25.1497%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:88 (decompose) (2 samples, 0.24%)</title><rect x="25.1497%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="311.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose) (2 samples, 0.24%)</title><rect x="25.1497%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="333.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:163 (_osd_tl1_l2d2p365) (2 samples, 0.24%)</title><rect x="25.1497%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="355.50"></text></g><g><title>        res = _osd_tl1_l2d2p365( (2 samples, 0.24%)</title><rect x="25.1497%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:157 (tl1_l2d2p365) (2 samples, 0.24%)</title><rect x="25.1497%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="210" fg:w="2"/><text x="25.3997%" y="399.50"></text></g><g><title>        match = self._get_valid_values_regex.search(docstring) (2 samples, 0.24%)</title><rect x="25.3892%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="212" fg:w="2"/><text x="25.6392%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/matplotlib/artist.py:1491 (get_valid_values) (2 samples, 0.24%)</title><rect x="25.3892%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="212" fg:w="2"/><text x="25.6392%" y="179.50"></text></g><g><title>            accepts = self.get_valid_values(prop) (2 samples, 0.24%)</title><rect x="25.3892%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="212" fg:w="2"/><text x="25.6392%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/matplotlib/artist.py:1617 (pprint_setters) (2 samples, 0.24%)</title><rect x="25.3892%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="212" fg:w="2"/><text x="25.6392%" y="223.50"></text></g><g><title>            &apos;Properties:\n&apos; + &apos;\n&apos;.join(ai.pprint_setters(leadingspace=4))) (2 samples, 0.24%)</title><rect x="25.3892%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="212" fg:w="2"/><text x="25.6392%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/matplotlib/artist.py:1856 (kwdoc) (2 samples, 0.24%)</title><rect x="25.3892%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="212" fg:w="2"/><text x="25.6392%" y="267.50"></text></g><g><title>            + kwdoc(cls)) (2 samples, 0.24%)</title><rect x="25.3892%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="212" fg:w="2"/><text x="25.6392%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/matplotlib/artist.py:178 (_update_set_signature_and_docstring) (2 samples, 0.24%)</title><rect x="25.3892%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="212" fg:w="2"/><text x="25.6392%" y="311.50"></text></g><g><title>        cls._update_set_signature_and_docstring() (2 samples, 0.24%)</title><rect x="25.3892%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="212" fg:w="2"/><text x="25.6392%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/matplotlib/artist.py:150 (__init_subclass__) (2 samples, 0.24%)</title><rect x="25.3892%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="212" fg:w="2"/><text x="25.6392%" y="355.50"></text></g><g><title>        new_rho = rho / (self._weight * new_scale**2) (2 samples, 0.24%)</title><rect x="25.7485%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:47 (prox) (2 samples, 0.24%)</title><rect x="25.7485%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="179.50"></text></g><g><title>            output[start_index:end_index] = func.prox( (2 samples, 0.24%)</title><rect x="25.7485%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:608 (prox) (2 samples, 0.24%)</title><rect x="25.7485%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="223.50"></text></g><g><title>        zk1 = g.prox( (2 samples, 0.24%)</title><rect x="25.7485%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:194 (admm) (2 samples, 0.24%)</title><rect x="25.7485%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="267.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="25.7485%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="25.7485%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="311.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="25.7485%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="25.7485%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="355.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="25.7485%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="25.7485%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="399.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="25.7485%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="25.7485%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="443.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="25.7485%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="25.7485%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="487.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="25.7485%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="25.7485%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="531.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="25.7485%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="25.7485%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="575.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="25.7485%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="25.7485%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="619.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="25.7485%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="25.7485%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="215" fg:w="2"/><text x="25.9985%" y="663.50"></text></g><g><title>        new_scale = equil_scaling * self._scale (2 samples, 0.24%)</title><rect x="25.9880%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:46 (prox) (2 samples, 0.24%)</title><rect x="25.9880%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="179.50"></text></g><g><title>            output[start_index:end_index] = func.prox( (2 samples, 0.24%)</title><rect x="25.9880%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:608 (prox) (2 samples, 0.24%)</title><rect x="25.9880%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="223.50"></text></g><g><title>        zk1 = g.prox( (2 samples, 0.24%)</title><rect x="25.9880%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:194 (admm) (2 samples, 0.24%)</title><rect x="25.9880%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="267.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="25.9880%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="25.9880%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="311.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="25.9880%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="25.9880%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="355.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="25.9880%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="25.9880%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="399.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="25.9880%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="25.9880%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="443.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="25.9880%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="25.9880%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="487.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="25.9880%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="25.9880%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="531.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="25.9880%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="25.9880%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="575.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="25.9880%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="25.9880%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="619.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="25.9880%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="25.9880%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="217" fg:w="2"/><text x="26.2380%" y="663.50"></text></g><g><title>        output = np.zeros(np.asarray(v).shape) (2 samples, 0.24%)</title><rect x="26.2275%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:593 (evaluate) (2 samples, 0.24%)</title><rect x="26.2275%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="179.50"></text></g><g><title>    return (0.5 * zk1 @ P @ zk1 + q @ zk1 + r) / obj_scale + g.evaluate( (2 samples, 0.24%)</title><rect x="26.2275%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/util.py:93 (evaluate_objective) (2 samples, 0.24%)</title><rect x="26.2275%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="223.50"></text></g><g><title>        obj_val = util.evaluate_objective(P, q, r, g, zk1, obj_scale, equil_scaling) (2 samples, 0.24%)</title><rect x="26.2275%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:208 (admm) (2 samples, 0.24%)</title><rect x="26.2275%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="267.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="26.2275%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="26.2275%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="311.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="26.2275%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="26.2275%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="355.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="26.2275%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="26.2275%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="399.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="26.2275%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="26.2275%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="443.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="26.2275%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="26.2275%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="487.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="26.2275%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="26.2275%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="531.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="26.2275%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="26.2275%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="575.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="26.2275%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="26.2275%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="619.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="26.2275%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="26.2275%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="219" fg:w="2"/><text x="26.4775%" y="663.50"></text></g><g><title>        r_dual = np.linalg.norm(P @ zk1 + q + A.T @ nuk1 + rho_vec * uk1, ord=np.inf) (3 samples, 0.36%)</title><rect x="26.5868%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:207 (admm) (3 samples, 0.36%)</title><rect x="26.5868%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="179.50"></text></g><g><title>                self._iterates = admm.admm( (3 samples, 0.36%)</title><rect x="26.5868%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (3 samples, 0.36%)</title><rect x="26.5868%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="223.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (3 samples, 0.36%)</title><rect x="26.5868%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (3 samples, 0.36%)</title><rect x="26.5868%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="267.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (3 samples, 0.36%)</title><rect x="26.5868%" y="276" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (3 samples, 0.36%)</title><rect x="26.5868%" y="298" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="311.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (3 samples, 0.36%)</title><rect x="26.5868%" y="320" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="333.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="26.5868%" y="342" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="355.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="26.5868%" y="364" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="26.5868%" y="386" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="399.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="26.5868%" y="408" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (3 samples, 0.36%)</title><rect x="26.5868%" y="430" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="443.50"></text></g><g><title>            self.capacity_analysis.run( (3 samples, 0.36%)</title><rect x="26.5868%" y="452" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (3 samples, 0.36%)</title><rect x="26.5868%" y="474" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="487.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (3 samples, 0.36%)</title><rect x="26.5868%" y="496" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (3 samples, 0.36%)</title><rect x="26.5868%" y="518" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="531.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="26.5868%" y="540" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="26.5868%" y="562" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="222" fg:w="3"/><text x="26.8368%" y="575.50"></text></g><g><title>        r_prim = np.linalg.norm(A @ zk1 - b, ord=np.inf) (4 samples, 0.48%)</title><rect x="26.9461%" y="144" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:206 (admm) (4 samples, 0.48%)</title><rect x="26.9461%" y="166" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="179.50"></text></g><g><title>                self._iterates = admm.admm( (4 samples, 0.48%)</title><rect x="26.9461%" y="188" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (4 samples, 0.48%)</title><rect x="26.9461%" y="210" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="223.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (4 samples, 0.48%)</title><rect x="26.9461%" y="232" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (4 samples, 0.48%)</title><rect x="26.9461%" y="254" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="267.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (4 samples, 0.48%)</title><rect x="26.9461%" y="276" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (4 samples, 0.48%)</title><rect x="26.9461%" y="298" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="311.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (4 samples, 0.48%)</title><rect x="26.9461%" y="320" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="333.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (4 samples, 0.48%)</title><rect x="26.9461%" y="342" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="355.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (4 samples, 0.48%)</title><rect x="26.9461%" y="364" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (4 samples, 0.48%)</title><rect x="26.9461%" y="386" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="399.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (4 samples, 0.48%)</title><rect x="26.9461%" y="408" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (4 samples, 0.48%)</title><rect x="26.9461%" y="430" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="443.50"></text></g><g><title>            self.capacity_analysis.run( (4 samples, 0.48%)</title><rect x="26.9461%" y="452" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (4 samples, 0.48%)</title><rect x="26.9461%" y="474" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="487.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (4 samples, 0.48%)</title><rect x="26.9461%" y="496" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (4 samples, 0.48%)</title><rect x="26.9461%" y="518" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="531.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (4 samples, 0.48%)</title><rect x="26.9461%" y="540" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (4 samples, 0.48%)</title><rect x="26.9461%" y="562" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="225" fg:w="4"/><text x="27.1961%" y="575.50"></text></g><g><title>    fit_signal = tl1_l2d2p365(density_signal, use_ixs=use_days, tau=0.85, solver=solver) (3 samples, 0.36%)</title><rect x="27.4251%" y="540" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="229" fg:w="3"/><text x="27.6751%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_quality.py:42 (make_density_scores) (3 samples, 0.36%)</title><rect x="27.4251%" y="562" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="229" fg:w="3"/><text x="27.6751%" y="575.50"></text></g><g><title>        s1, s2, s3 = make_density_scores( (3 samples, 0.36%)</title><rect x="27.4251%" y="584" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="229" fg:w="3"/><text x="27.6751%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:826 (get_density_scores) (3 samples, 0.36%)</title><rect x="27.4251%" y="606" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="229" fg:w="3"/><text x="27.6751%" y="619.50"></text></g><g><title>        self.get_density_scores(threshold=threshold, solver=solver) (3 samples, 0.36%)</title><rect x="27.4251%" y="628" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="229" fg:w="3"/><text x="27.6751%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:771 (get_daily_scores) (3 samples, 0.36%)</title><rect x="27.4251%" y="650" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="229" fg:w="3"/><text x="27.6751%" y="663.50"></text></g><g><title>            self.get_daily_scores(threshold=0.2, solver=solver_convex) (3 samples, 0.36%)</title><rect x="27.4251%" y="672" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="229" fg:w="3"/><text x="27.6751%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:339 (run_pipeline) (3 samples, 0.36%)</title><rect x="27.4251%" y="694" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="229" fg:w="3"/><text x="27.6751%" y="707.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="27.4251%" y="716" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="229" fg:w="3"/><text x="27.6751%" y="729.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="27.4251%" y="738" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="229" fg:w="3"/><text x="27.6751%" y="751.50"></text></g><g><title>        smoothed = rise_set_smoothed( (14 samples, 1.68%)</title><rect x="27.7844%" y="584" width="1.6766%" height="21" fill="rgb(255,230,230)" fg:x="232" fg:w="14"/><text x="28.0344%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/sunrise_sunset_estimation.py:67 (calculate_times) (14 samples, 1.68%)</title><rect x="27.7844%" y="606" width="1.6766%" height="21" fill="rgb(255,230,230)" fg:x="232" fg:w="14"/><text x="28.0344%" y="619.50"></text></g><g><title>        self.daytime_analysis.calculate_times(self.filled_data_matrix, solver=solver_convex) (14 samples, 1.68%)</title><rect x="27.7844%" y="628" width="1.6766%" height="21" fill="rgb(255,230,230)" fg:x="232" fg:w="14"/><text x="28.0344%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:472 (run_pipeline) (14 samples, 1.68%)</title><rect x="27.7844%" y="650" width="1.6766%" height="21" fill="rgb(255,230,230)" fg:x="232" fg:w="14"/><text x="28.0344%" y="663.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (14 samples, 1.68%)</title><rect x="27.7844%" y="672" width="1.6766%" height="21" fill="rgb(255,230,230)" fg:x="232" fg:w="14"/><text x="28.0344%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (14 samples, 1.68%)</title><rect x="27.7844%" y="694" width="1.6766%" height="21" fill="rgb(255,230,230)" fg:x="232" fg:w="14"/><text x="28.0344%" y="707.50"></text></g><g><title>    sr_smoothed = tl1_l2d2p365( (33 samples, 3.95%)</title><rect x="27.7844%" y="540" width="3.9521%" height="21" fill="rgb(255,220,220)" fg:x="232" fg:w="33"/><text x="28.0344%" y="553.50">  ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/sunrise_sunset.py:34 (rise_set_smoothed) (33 samples, 3.95%)</title><rect x="27.7844%" y="562" width="3.9521%" height="21" fill="rgb(255,220,220)" fg:x="232" fg:w="33"/><text x="28.0344%" y="575.50">/ho..</text></g><g><title>        smoothed = rise_set_smoothed(measured, sunrise_tau=self.sunrise_tau, sunset_tau=self.sunset_tau, solver=solver) (19 samples, 2.28%)</title><rect x="29.4611%" y="584" width="2.2754%" height="21" fill="rgb(255,227,227)" fg:x="246" fg:w="19"/><text x="29.7111%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/sunrise_sunset_estimation.py:282 (run_optimizer) (19 samples, 2.28%)</title><rect x="29.4611%" y="606" width="2.2754%" height="21" fill="rgb(255,227,227)" fg:x="246" fg:w="19"/><text x="29.7111%" y="619.50"></text></g><g><title>            ss.run_optimizer(self.raw_data_matrix, plot=False, solver=solver_convex) (19 samples, 2.28%)</title><rect x="29.4611%" y="628" width="2.2754%" height="21" fill="rgb(255,227,227)" fg:x="246" fg:w="19"/><text x="29.7111%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:273 (run_pipeline) (19 samples, 2.28%)</title><rect x="29.4611%" y="650" width="2.2754%" height="21" fill="rgb(255,227,227)" fg:x="246" fg:w="19"/><text x="29.7111%" y="663.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (19 samples, 2.28%)</title><rect x="29.4611%" y="672" width="2.2754%" height="21" fill="rgb(255,227,227)" fg:x="246" fg:w="19"/><text x="29.7111%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (19 samples, 2.28%)</title><rect x="29.4611%" y="694" width="2.2754%" height="21" fill="rgb(255,227,227)" fg:x="246" fg:w="19"/><text x="29.7111%" y="707.50"></text></g><g><title>        smoothed = rise_set_smoothed( (22 samples, 2.63%)</title><rect x="31.7365%" y="584" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="265" fg:w="22"/><text x="31.9865%" y="597.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/sunrise_sunset_estimation.py:67 (calculate_times) (22 samples, 2.63%)</title><rect x="31.7365%" y="606" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="265" fg:w="22"/><text x="31.9865%" y="619.50">/..</text></g><g><title>        self.daytime_analysis.calculate_times(self.filled_data_matrix, solver=solver_convex) (22 samples, 2.63%)</title><rect x="31.7365%" y="628" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="265" fg:w="22"/><text x="31.9865%" y="641.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:472 (run_pipeline) (22 samples, 2.63%)</title><rect x="31.7365%" y="650" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="265" fg:w="22"/><text x="31.9865%" y="663.50">/..</text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (22 samples, 2.63%)</title><rect x="31.7365%" y="672" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="265" fg:w="22"/><text x="31.9865%" y="685.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (22 samples, 2.63%)</title><rect x="31.7365%" y="694" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="265" fg:w="22"/><text x="31.9865%" y="707.50">/..</text></g><g><title>    ss_smoothed = tl1_l2d2p365( (43 samples, 5.15%)</title><rect x="31.7365%" y="540" width="5.1497%" height="21" fill="rgb(255,216,216)" fg:x="265" fg:w="43"/><text x="31.9865%" y="553.50">   ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/sunrise_sunset.py:37 (rise_set_smoothed) (43 samples, 5.15%)</title><rect x="31.7365%" y="562" width="5.1497%" height="21" fill="rgb(255,216,216)" fg:x="265" fg:w="43"/><text x="31.9865%" y="575.50">/hom..</text></g><g><title>        smoothed = rise_set_smoothed(measured, sunrise_tau=self.sunrise_tau, sunset_tau=self.sunset_tau, solver=solver) (21 samples, 2.51%)</title><rect x="34.3713%" y="584" width="2.5150%" height="21" fill="rgb(255,226,226)" fg:x="287" fg:w="21"/><text x="34.6213%" y="597.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/sunrise_sunset_estimation.py:282 (run_optimizer) (21 samples, 2.51%)</title><rect x="34.3713%" y="606" width="2.5150%" height="21" fill="rgb(255,226,226)" fg:x="287" fg:w="21"/><text x="34.6213%" y="619.50">/..</text></g><g><title>            ss.run_optimizer(self.raw_data_matrix, plot=False, solver=solver_convex) (21 samples, 2.51%)</title><rect x="34.3713%" y="628" width="2.5150%" height="21" fill="rgb(255,226,226)" fg:x="287" fg:w="21"/><text x="34.6213%" y="641.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:273 (run_pipeline) (21 samples, 2.51%)</title><rect x="34.3713%" y="650" width="2.5150%" height="21" fill="rgb(255,226,226)" fg:x="287" fg:w="21"/><text x="34.6213%" y="663.50">/..</text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (21 samples, 2.51%)</title><rect x="34.3713%" y="672" width="2.5150%" height="21" fill="rgb(255,226,226)" fg:x="287" fg:w="21"/><text x="34.6213%" y="685.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (21 samples, 2.51%)</title><rect x="34.3713%" y="694" width="2.5150%" height="21" fill="rgb(255,226,226)" fg:x="287" fg:w="21"/><text x="34.6213%" y="707.50">/..</text></g><g><title>        self.filtered_signal = tl1_l2d2p365(self.density_signal, w1=w1, use_ixs=use_days, tau=0.85, solver=solver) (3 samples, 0.36%)</title><rect x="36.8862%" y="540" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="308" fg:w="3"/><text x="37.1362%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/clear_day_detection.py:38 (filter_for_sparsity) (3 samples, 0.36%)</title><rect x="36.8862%" y="562" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="308" fg:w="3"/><text x="37.1362%" y="575.50"></text></g><g><title>        msk = self.filter_for_sparsity(data, solver=solver) (3 samples, 0.36%)</title><rect x="36.8862%" y="584" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="308" fg:w="3"/><text x="37.1362%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/clear_day_detection.py:100 (find_clear_days) (3 samples, 0.36%)</title><rect x="36.8862%" y="606" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="308" fg:w="3"/><text x="37.1362%" y="619.50"></text></g><g><title>        clear_days = self.clear_day_analysis.find_clear_days( (3 samples, 0.36%)</title><rect x="36.8862%" y="628" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="308" fg:w="3"/><text x="37.1362%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:1032 (detect_clear_days) (3 samples, 0.36%)</title><rect x="36.8862%" y="650" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="308" fg:w="3"/><text x="37.1362%" y="663.50"></text></g><g><title>            self.detect_clear_days( (3 samples, 0.36%)</title><rect x="36.8862%" y="672" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="308" fg:w="3"/><text x="37.1362%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:362 (run_pipeline) (3 samples, 0.36%)</title><rect x="36.8862%" y="694" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="308" fg:w="3"/><text x="37.1362%" y="707.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="36.8862%" y="716" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="308" fg:w="3"/><text x="37.1362%" y="729.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="36.8862%" y="738" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="308" fg:w="3"/><text x="37.1362%" y="751.50"></text></g><g><title>        self.x = tl1_l2d2p365(self.de, tau=0.9, w1=2e5, yearly_periodic=False, solver=solver) (16 samples, 1.92%)</title><rect x="37.2455%" y="540" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="311" fg:w="16"/><text x="37.4955%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/clear_day_detection.py:88 (find_clear_days) (16 samples, 1.92%)</title><rect x="37.2455%" y="562" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="311" fg:w="16"/><text x="37.4955%" y="575.50"></text></g><g><title>        clear_days = self.clear_day_analysis.find_clear_days( (16 samples, 1.92%)</title><rect x="37.2455%" y="584" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="311" fg:w="16"/><text x="37.4955%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:1032 (detect_clear_days) (16 samples, 1.92%)</title><rect x="37.2455%" y="606" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="311" fg:w="16"/><text x="37.4955%" y="619.50"></text></g><g><title>            self.detect_clear_days( (16 samples, 1.92%)</title><rect x="37.2455%" y="628" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="311" fg:w="16"/><text x="37.4955%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:362 (run_pipeline) (16 samples, 1.92%)</title><rect x="37.2455%" y="650" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="311" fg:w="16"/><text x="37.4955%" y="663.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (16 samples, 1.92%)</title><rect x="37.2455%" y="672" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="311" fg:w="16"/><text x="37.4955%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (16 samples, 1.92%)</title><rect x="37.2455%" y="694" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="311" fg:w="16"/><text x="37.4955%" y="707.50"></text></g><g><title>        self.y = tl1_l2d2p365(self.tc, tau=0.9, w1=2.5e5, yearly_periodic=False, solver=solver) (11 samples, 1.32%)</title><rect x="39.1617%" y="540" width="1.3174%" height="21" fill="rgb(255,232,232)" fg:x="327" fg:w="11"/><text x="39.4117%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/clear_day_detection.py:77 (find_clear_days) (11 samples, 1.32%)</title><rect x="39.1617%" y="562" width="1.3174%" height="21" fill="rgb(255,232,232)" fg:x="327" fg:w="11"/><text x="39.4117%" y="575.50"></text></g><g><title>        clear_days = self.clear_day_analysis.find_clear_days( (11 samples, 1.32%)</title><rect x="39.1617%" y="584" width="1.3174%" height="21" fill="rgb(255,232,232)" fg:x="327" fg:w="11"/><text x="39.4117%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:1032 (detect_clear_days) (11 samples, 1.32%)</title><rect x="39.1617%" y="606" width="1.3174%" height="21" fill="rgb(255,232,232)" fg:x="327" fg:w="11"/><text x="39.4117%" y="619.50"></text></g><g><title>            self.detect_clear_days( (11 samples, 1.32%)</title><rect x="39.1617%" y="628" width="1.3174%" height="21" fill="rgb(255,232,232)" fg:x="327" fg:w="11"/><text x="39.4117%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:362 (run_pipeline) (11 samples, 1.32%)</title><rect x="39.1617%" y="650" width="1.3174%" height="21" fill="rgb(255,232,232)" fg:x="327" fg:w="11"/><text x="39.4117%" y="663.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (11 samples, 1.32%)</title><rect x="39.1617%" y="672" width="1.3174%" height="21" fill="rgb(255,232,232)" fg:x="327" fg:w="11"/><text x="39.4117%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (11 samples, 1.32%)</title><rect x="39.1617%" y="694" width="1.3174%" height="21" fill="rgb(255,232,232)" fg:x="327" fg:w="11"/><text x="39.4117%" y="707.50"></text></g><g><title>                    sr_smoothed = tl1_l2d2p365( (56 samples, 6.71%)</title><rect x="40.4790%" y="540" width="6.7066%" height="21" fill="rgb(255,211,211)" fg:x="338" fg:w="56"/><text x="40.7290%" y="553.50">     ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/sunrise_sunset_estimation.py:231 (run_optimizer) (56 samples, 6.71%)</title><rect x="40.4790%" y="562" width="6.7066%" height="21" fill="rgb(255,211,211)" fg:x="338" fg:w="56"/><text x="40.7290%" y="575.50">/home/..</text></g><g><title>            ss.run_optimizer(self.raw_data_matrix, plot=False, solver=solver_convex) (56 samples, 6.71%)</title><rect x="40.4790%" y="584" width="6.7066%" height="21" fill="rgb(255,211,211)" fg:x="338" fg:w="56"/><text x="40.7290%" y="597.50">     ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:273 (run_pipeline) (56 samples, 6.71%)</title><rect x="40.4790%" y="606" width="6.7066%" height="21" fill="rgb(255,211,211)" fg:x="338" fg:w="56"/><text x="40.7290%" y="619.50">/home/..</text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (56 samples, 6.71%)</title><rect x="40.4790%" y="628" width="6.7066%" height="21" fill="rgb(255,211,211)" fg:x="338" fg:w="56"/><text x="40.7290%" y="641.50">     ..</text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (56 samples, 6.71%)</title><rect x="40.4790%" y="650" width="6.7066%" height="21" fill="rgb(255,211,211)" fg:x="338" fg:w="56"/><text x="40.7290%" y="663.50">/home/..</text></g><g><title>    problem.decompose(solver=solver, verbose=verbose) (220 samples, 26.35%)</title><rect x="27.4251%" y="452" width="26.3473%" height="21" fill="rgb(255,173,173)" fg:x="229" fg:w="220"/><text x="27.6751%" y="465.50">    problem.decompose(solver=s..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:163 (_osd_tl1_l2d2p365) (220 samples, 26.35%)</title><rect x="27.4251%" y="474" width="26.3473%" height="21" fill="rgb(255,173,173)" fg:x="229" fg:w="220"/><text x="27.6751%" y="487.50">/home/ec2-user/solar-data-tools..</text></g><g><title>        res = _osd_tl1_l2d2p365( (220 samples, 26.35%)</title><rect x="27.4251%" y="496" width="26.3473%" height="21" fill="rgb(255,173,173)" fg:x="229" fg:w="220"/><text x="27.6751%" y="509.50">        res = _osd_tl1_l2d2p36..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:157 (tl1_l2d2p365) (220 samples, 26.35%)</title><rect x="27.4251%" y="518" width="26.3473%" height="21" fill="rgb(255,173,173)" fg:x="229" fg:w="220"/><text x="27.6751%" y="531.50">/home/ec2-user/solar-data-tools..</text></g><g><title>                    ss_smoothed = tl1_l2d2p365( (55 samples, 6.59%)</title><rect x="47.1856%" y="540" width="6.5868%" height="21" fill="rgb(255,211,211)" fg:x="394" fg:w="55"/><text x="47.4356%" y="553.50">     ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/sunrise_sunset_estimation.py:234 (run_optimizer) (55 samples, 6.59%)</title><rect x="47.1856%" y="562" width="6.5868%" height="21" fill="rgb(255,211,211)" fg:x="394" fg:w="55"/><text x="47.4356%" y="575.50">/home/..</text></g><g><title>            ss.run_optimizer(self.raw_data_matrix, plot=False, solver=solver_convex) (55 samples, 6.59%)</title><rect x="47.1856%" y="584" width="6.5868%" height="21" fill="rgb(255,211,211)" fg:x="394" fg:w="55"/><text x="47.4356%" y="597.50">     ..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:273 (run_pipeline) (55 samples, 6.59%)</title><rect x="47.1856%" y="606" width="6.5868%" height="21" fill="rgb(255,211,211)" fg:x="394" fg:w="55"/><text x="47.4356%" y="619.50">/home/..</text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (55 samples, 6.59%)</title><rect x="47.1856%" y="628" width="6.5868%" height="21" fill="rgb(255,211,211)" fg:x="394" fg:w="55"/><text x="47.4356%" y="641.50">     ..</text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (55 samples, 6.59%)</title><rect x="47.1856%" y="650" width="6.5868%" height="21" fill="rgb(255,211,211)" fg:x="394" fg:w="55"/><text x="47.4356%" y="663.50">/home/..</text></g><g><title>        results = self._model.solve() (235 samples, 28.14%)</title><rect x="27.4251%" y="144" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="157.50">        results = self._model.so..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/osqp/interface.py:235 (solve) (235 samples, 28.14%)</title><rect x="27.4251%" y="166" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="179.50">/home/ec2-user/.venv/lib64/python..</text></g><g><title>        results = solver.solve() (235 samples, 28.14%)</title><rect x="27.4251%" y="188" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="201.50">        results = solver.solve()..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/qp_solvers/osqp_qpif.py:106 (solve_via_data) (235 samples, 28.14%)</title><rect x="27.4251%" y="210" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="223.50">/home/ec2-user/.venv/lib64/python..</text></g><g><title>        return self.solver.solve_via_data(data, warm_start, verbose, (235 samples, 28.14%)</title><rect x="27.4251%" y="232" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="245.50">        return self.solver.solve..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/solving_chain.py:423 (solve_via_data) (235 samples, 28.14%)</title><rect x="27.4251%" y="254" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="267.50">/home/ec2-user/.venv/lib64/python..</text></g><g><title>        solution = solving_chain.solve_via_data( (235 samples, 28.14%)</title><rect x="27.4251%" y="276" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="289.50">        solution = solving_chain..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:1066 (_solve) (235 samples, 28.14%)</title><rect x="27.4251%" y="298" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="311.50">/home/ec2-user/.venv/lib64/python..</text></g><g><title>        return solve_func(self, *args, **kwargs) (235 samples, 28.14%)</title><rect x="27.4251%" y="320" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="333.50">        return solve_func(self, ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:495 (solve) (235 samples, 28.14%)</title><rect x="27.4251%" y="342" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="355.50">/home/ec2-user/.venv/lib64/python..</text></g><g><title>        cvx_prob.solve(solver=solver, **solver_kwargs) (235 samples, 28.14%)</title><rect x="27.4251%" y="364" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="377.50">        cvx_prob.solve(solver=so..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:200 (_solve_cvx) (235 samples, 28.14%)</title><rect x="27.4251%" y="386" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="399.50">/home/ec2-user/.venv/lib64/python..</text></g><g><title>            result = self._solve_cvx(canonical_form, solver, **kwargs) (235 samples, 28.14%)</title><rect x="27.4251%" y="408" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="421.50">            result = self._solve..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:93 (decompose) (235 samples, 28.14%)</title><rect x="27.4251%" y="430" width="28.1437%" height="21" fill="rgb(255,170,170)" fg:x="229" fg:w="235"/><text x="27.6751%" y="443.50">/home/ec2-user/.venv/lib64/python..</text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_rel=1e-6, eps_abs=1e-6) (15 samples, 1.80%)</title><rect x="53.7725%" y="452" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:277 (_osd_l2_l1d2_constrained) (15 samples, 1.80%)</title><rect x="53.7725%" y="474" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="487.50"></text></g><g><title>        res = _osd_l2_l1d2_constrained( (15 samples, 1.80%)</title><rect x="53.7725%" y="496" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:259 (l2_l1d2_constrained) (15 samples, 1.80%)</title><rect x="53.7725%" y="518" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="531.50"></text></g><g><title>        out = l2_l1d2_constrained(y, w1=weight, solver=solver) (15 samples, 1.80%)</title><rect x="53.7725%" y="540" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:373 (get_l2_l1d2) (15 samples, 1.80%)</title><rect x="53.7725%" y="562" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="575.50"></text></g><g><title>            self.get_l2_l1d2(y_rs, weight=weight, solver=solver) (15 samples, 1.80%)</title><rect x="53.7725%" y="584" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:139 (pointmass_detection) (15 samples, 1.80%)</title><rect x="53.7725%" y="606" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="619.50"></text></g><g><title>        self.pointmass_detection( (15 samples, 1.80%)</title><rect x="53.7725%" y="628" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:75 (check_clipping) (15 samples, 1.80%)</title><rect x="53.7725%" y="650" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="663.50"></text></g><g><title>        self.clipping_analysis.check_clipping( (15 samples, 1.80%)</title><rect x="53.7725%" y="672" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:868 (clipping_check) (15 samples, 1.80%)</title><rect x="53.7725%" y="694" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="707.50"></text></g><g><title>            self.clipping_check(solver=solver_convex) (15 samples, 1.80%)</title><rect x="53.7725%" y="716" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="729.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:375 (run_pipeline) (15 samples, 1.80%)</title><rect x="53.7725%" y="738" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="751.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (15 samples, 1.80%)</title><rect x="53.7725%" y="760" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="773.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (15 samples, 1.80%)</title><rect x="53.7725%" y="782" width="1.7964%" height="21" fill="rgb(255,229,229)" fg:x="449" fg:w="15"/><text x="54.0225%" y="795.50"></text></g><g><title>        result = func(self, *args, **kwargs) (3 samples, 0.36%)</title><rect x="55.6886%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="465" fg:w="3"/><text x="55.9386%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (3 samples, 0.36%)</title><rect x="55.6886%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="465" fg:w="3"/><text x="55.9386%" y="179.50"></text></g><g><title>        return asarray(a).ndim (3 samples, 0.36%)</title><rect x="56.1677%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="469" fg:w="3"/><text x="56.4177%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/fromnumeric.py:3211 (ndim) (3 samples, 0.36%)</title><rect x="56.1677%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="469" fg:w="3"/><text x="56.4177%" y="179.50"></text></g><g><title>    if np.ndim(x) != 0: (3 samples, 0.36%)</title><rect x="56.1677%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="469" fg:w="3"/><text x="56.4177%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_sputils.py:222 (isintlike) (3 samples, 0.36%)</title><rect x="56.1677%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="469" fg:w="3"/><text x="56.4177%" y="223.50"></text></g><g><title>        if not isintlike(d): (3 samples, 0.36%)</title><rect x="56.1677%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="469" fg:w="3"/><text x="56.4177%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_sputils.py:248 (isshape) (3 samples, 0.36%)</title><rect x="56.1677%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="469" fg:w="3"/><text x="56.4177%" y="267.50"></text></g><g><title>            if isshape(arg1): (2 samples, 0.24%)</title><rect x="56.2874%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="470" fg:w="2"/><text x="56.5374%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:136 (__init__) (2 samples, 0.24%)</title><rect x="56.2874%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="470" fg:w="2"/><text x="56.5374%" y="311.50"></text></g><g><title>            return self._coo_container(self.shape, dtype=self.dtype) (2 samples, 0.24%)</title><rect x="56.2874%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="470" fg:w="2"/><text x="56.5374%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_dok.py:387 (tocoo) (2 samples, 0.24%)</title><rect x="56.2874%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="470" fg:w="2"/><text x="56.5374%" y="355.50"></text></g><g><title>            a = a.tocoo() (2 samples, 0.24%)</title><rect x="56.2874%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="470" fg:w="2"/><text x="56.5374%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_construct.py:759 (block_diag) (2 samples, 0.24%)</title><rect x="56.2874%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="470" fg:w="2"/><text x="56.5374%" y="399.50"></text></g><g><title>        return bound(*args, **kwds) (2 samples, 0.24%)</title><rect x="56.5269%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="472" fg:w="2"/><text x="56.7769%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/fromnumeric.py:59 (_wrapfunc) (2 samples, 0.24%)</title><rect x="56.5269%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="472" fg:w="2"/><text x="56.7769%" y="179.50"></text></g><g><title>                idx_dtype = self._get_index_dtype((row, col), maxval=max(self.shape), check_contents=True) (2 samples, 0.24%)</title><rect x="57.2455%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="478" fg:w="2"/><text x="57.4955%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:163 (__init__) (2 samples, 0.24%)</title><rect x="57.2455%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="478" fg:w="2"/><text x="57.4955%" y="223.50"></text></g><g><title>        return self.__class__((self.data, (self.col, self.row)), (2 samples, 0.24%)</title><rect x="57.2455%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="478" fg:w="2"/><text x="57.4955%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:306 (transpose) (2 samples, 0.24%)</title><rect x="57.2455%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="478" fg:w="2"/><text x="57.4955%" y="267.50"></text></g><g><title>        return get_index_dtype(arrays, maxval, (check_contents and not self._is_array)) (6 samples, 0.72%)</title><rect x="56.8862%" y="144" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="475" fg:w="6"/><text x="57.1362%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:1289 (_get_index_dtype) (6 samples, 0.72%)</title><rect x="56.8862%" y="166" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="475" fg:w="6"/><text x="57.1362%" y="179.50"></text></g><g><title>        return np.maximum(v - 1 / rho, 0) - np.maximum(-v - 1 / rho, 0) (4 samples, 0.48%)</title><rect x="57.8443%" y="144" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:86 (prox_raw) (4 samples, 0.48%)</title><rect x="57.8443%" y="166" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="179.50"></text></g><g><title>            self.prox_raw(new_rho, new_scale * v - self._shift) + self._shift (4 samples, 0.48%)</title><rect x="57.8443%" y="188" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:50 (prox) (4 samples, 0.48%)</title><rect x="57.8443%" y="210" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="223.50"></text></g><g><title>            output[start_index:end_index] = func.prox( (4 samples, 0.48%)</title><rect x="57.8443%" y="232" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:608 (prox) (4 samples, 0.48%)</title><rect x="57.8443%" y="254" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="267.50"></text></g><g><title>        zk1 = g.prox( (4 samples, 0.48%)</title><rect x="57.8443%" y="276" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:194 (admm) (4 samples, 0.48%)</title><rect x="57.8443%" y="298" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="311.50"></text></g><g><title>                self._iterates = admm.admm( (4 samples, 0.48%)</title><rect x="57.8443%" y="320" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (4 samples, 0.48%)</title><rect x="57.8443%" y="342" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="355.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (4 samples, 0.48%)</title><rect x="57.8443%" y="364" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (4 samples, 0.48%)</title><rect x="57.8443%" y="386" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="399.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (4 samples, 0.48%)</title><rect x="57.8443%" y="408" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (4 samples, 0.48%)</title><rect x="57.8443%" y="430" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="443.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (4 samples, 0.48%)</title><rect x="57.8443%" y="452" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (4 samples, 0.48%)</title><rect x="57.8443%" y="474" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="487.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (4 samples, 0.48%)</title><rect x="57.8443%" y="496" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (4 samples, 0.48%)</title><rect x="57.8443%" y="518" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="531.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (4 samples, 0.48%)</title><rect x="57.8443%" y="540" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (4 samples, 0.48%)</title><rect x="57.8443%" y="562" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="575.50"></text></g><g><title>            self.capacity_analysis.run( (4 samples, 0.48%)</title><rect x="57.8443%" y="584" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (4 samples, 0.48%)</title><rect x="57.8443%" y="606" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="619.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (4 samples, 0.48%)</title><rect x="57.8443%" y="628" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (4 samples, 0.48%)</title><rect x="57.8443%" y="650" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="663.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (4 samples, 0.48%)</title><rect x="57.8443%" y="672" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (4 samples, 0.48%)</title><rect x="57.8443%" y="694" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="483" fg:w="4"/><text x="58.0943%" y="707.50"></text></g><g><title>        return np.sum(output) (2 samples, 0.24%)</title><rect x="58.3234%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:600 (evaluate) (2 samples, 0.24%)</title><rect x="58.3234%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="179.50"></text></g><g><title>    return (0.5 * zk1 @ P @ zk1 + q @ zk1 + r) / obj_scale + g.evaluate( (2 samples, 0.24%)</title><rect x="58.3234%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/util.py:93 (evaluate_objective) (2 samples, 0.24%)</title><rect x="58.3234%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="223.50"></text></g><g><title>        obj_val = util.evaluate_objective(P, q, r, g, zk1, obj_scale, equil_scaling) (2 samples, 0.24%)</title><rect x="58.3234%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:208 (admm) (2 samples, 0.24%)</title><rect x="58.3234%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="267.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="58.3234%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="58.3234%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="311.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="58.3234%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="58.3234%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="355.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="58.3234%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="58.3234%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="399.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="58.3234%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="58.3234%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="443.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="58.3234%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="58.3234%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="487.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="58.3234%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="58.3234%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="531.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="58.3234%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="58.3234%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="575.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="58.3234%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="58.3234%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="619.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="58.3234%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="58.3234%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="487" fg:w="2"/><text x="58.5734%" y="663.50"></text></g><g><title>        return self._fac_system.solve(rhs) (22 samples, 2.63%)</title><rect x="58.8024%" y="144" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="157.50">..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/matrix.py:30 (solve) (22 samples, 2.63%)</title><rect x="58.8024%" y="166" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="179.50">/..</text></g><g><title>            kkt_solve = kkt_system.solve(np.concatenate([-q + rho_vec * (zk - uk), b])) (22 samples, 2.63%)</title><rect x="58.8024%" y="188" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="201.50">..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:187 (admm) (22 samples, 2.63%)</title><rect x="58.8024%" y="210" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="223.50">/..</text></g><g><title>                self._iterates = admm.admm( (22 samples, 2.63%)</title><rect x="58.8024%" y="232" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="245.50">..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (22 samples, 2.63%)</title><rect x="58.8024%" y="254" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="267.50">/..</text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (22 samples, 2.63%)</title><rect x="58.8024%" y="276" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="289.50">..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (22 samples, 2.63%)</title><rect x="58.8024%" y="298" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="311.50">/..</text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (22 samples, 2.63%)</title><rect x="58.8024%" y="320" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="333.50">..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (22 samples, 2.63%)</title><rect x="58.8024%" y="342" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="355.50">/..</text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (22 samples, 2.63%)</title><rect x="58.8024%" y="364" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="377.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (22 samples, 2.63%)</title><rect x="58.8024%" y="386" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="399.50">/..</text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (22 samples, 2.63%)</title><rect x="58.8024%" y="408" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="421.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (22 samples, 2.63%)</title><rect x="58.8024%" y="430" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="443.50">/..</text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (22 samples, 2.63%)</title><rect x="58.8024%" y="452" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="465.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (22 samples, 2.63%)</title><rect x="58.8024%" y="474" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="487.50">/..</text></g><g><title>            self.capacity_analysis.run( (22 samples, 2.63%)</title><rect x="58.8024%" y="496" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="509.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (22 samples, 2.63%)</title><rect x="58.8024%" y="518" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="531.50">/..</text></g><g><title>            self.capacity_clustering(solver=solver) (22 samples, 2.63%)</title><rect x="58.8024%" y="540" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="553.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (22 samples, 2.63%)</title><rect x="58.8024%" y="562" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="575.50">/..</text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (22 samples, 2.63%)</title><rect x="58.8024%" y="584" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="597.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (22 samples, 2.63%)</title><rect x="58.8024%" y="606" width="2.6347%" height="21" fill="rgb(255,225,225)" fg:x="491" fg:w="22"/><text x="59.0524%" y="619.50">/..</text></g><g><title>        return self._getnnz() (2 samples, 0.24%)</title><rect x="61.4371%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="513" fg:w="2"/><text x="61.6871%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:294 (nnz) (2 samples, 0.24%)</title><rect x="61.4371%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="513" fg:w="2"/><text x="61.6871%" y="179.50"></text></g><g><title>        return self._weight * self.evaluate_raw(self._scale * v - self._shift) (4 samples, 0.48%)</title><rect x="61.7964%" y="144" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:43 (evaluate) (4 samples, 0.48%)</title><rect x="61.7964%" y="166" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="179.50"></text></g><g><title>            output[start_index:end_index] = func.evaluate(v[start_index:end_index]) (4 samples, 0.48%)</title><rect x="61.7964%" y="188" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:598 (evaluate) (4 samples, 0.48%)</title><rect x="61.7964%" y="210" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="223.50"></text></g><g><title>    return (0.5 * zk1 @ P @ zk1 + q @ zk1 + r) / obj_scale + g.evaluate( (4 samples, 0.48%)</title><rect x="61.7964%" y="232" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/util.py:93 (evaluate_objective) (4 samples, 0.48%)</title><rect x="61.7964%" y="254" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="267.50"></text></g><g><title>        obj_val = util.evaluate_objective(P, q, r, g, zk1, obj_scale, equil_scaling) (4 samples, 0.48%)</title><rect x="61.7964%" y="276" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:208 (admm) (4 samples, 0.48%)</title><rect x="61.7964%" y="298" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="311.50"></text></g><g><title>                self._iterates = admm.admm( (4 samples, 0.48%)</title><rect x="61.7964%" y="320" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (4 samples, 0.48%)</title><rect x="61.7964%" y="342" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="355.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (4 samples, 0.48%)</title><rect x="61.7964%" y="364" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (4 samples, 0.48%)</title><rect x="61.7964%" y="386" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="399.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (4 samples, 0.48%)</title><rect x="61.7964%" y="408" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (4 samples, 0.48%)</title><rect x="61.7964%" y="430" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="443.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (4 samples, 0.48%)</title><rect x="61.7964%" y="452" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (4 samples, 0.48%)</title><rect x="61.7964%" y="474" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="487.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (4 samples, 0.48%)</title><rect x="61.7964%" y="496" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (4 samples, 0.48%)</title><rect x="61.7964%" y="518" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="531.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (4 samples, 0.48%)</title><rect x="61.7964%" y="540" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (4 samples, 0.48%)</title><rect x="61.7964%" y="562" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="575.50"></text></g><g><title>            self.capacity_analysis.run( (4 samples, 0.48%)</title><rect x="61.7964%" y="584" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (4 samples, 0.48%)</title><rect x="61.7964%" y="606" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="619.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (4 samples, 0.48%)</title><rect x="61.7964%" y="628" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (4 samples, 0.48%)</title><rect x="61.7964%" y="650" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="663.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (4 samples, 0.48%)</title><rect x="61.7964%" y="672" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (4 samples, 0.48%)</title><rect x="61.7964%" y="694" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="516" fg:w="4"/><text x="62.0464%" y="707.50"></text></g><g><title>                    sr_smoothed = tl1_l2d2p365( (2 samples, 0.24%)</title><rect x="62.8743%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="525" fg:w="2"/><text x="63.1243%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/sunrise_sunset_estimation.py:231 (run_optimizer) (2 samples, 0.24%)</title><rect x="62.8743%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="525" fg:w="2"/><text x="63.1243%" y="575.50"></text></g><g><title>            ss.run_optimizer(self.raw_data_matrix, plot=False, solver=solver_convex) (2 samples, 0.24%)</title><rect x="62.8743%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="525" fg:w="2"/><text x="63.1243%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:273 (run_pipeline) (2 samples, 0.24%)</title><rect x="62.8743%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="525" fg:w="2"/><text x="63.1243%" y="619.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="62.8743%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="525" fg:w="2"/><text x="63.1243%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="62.8743%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="525" fg:w="2"/><text x="63.1243%" y="663.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose) (4 samples, 0.48%)</title><rect x="62.8743%" y="452" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="525" fg:w="4"/><text x="63.1243%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:163 (_osd_tl1_l2d2p365) (4 samples, 0.48%)</title><rect x="62.8743%" y="474" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="525" fg:w="4"/><text x="63.1243%" y="487.50"></text></g><g><title>        res = _osd_tl1_l2d2p365( (4 samples, 0.48%)</title><rect x="62.8743%" y="496" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="525" fg:w="4"/><text x="63.1243%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:157 (tl1_l2d2p365) (4 samples, 0.48%)</title><rect x="62.8743%" y="518" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="525" fg:w="4"/><text x="63.1243%" y="531.50"></text></g><g><title>                    ss_smoothed = tl1_l2d2p365( (2 samples, 0.24%)</title><rect x="63.1138%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="527" fg:w="2"/><text x="63.3638%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/sunrise_sunset_estimation.py:234 (run_optimizer) (2 samples, 0.24%)</title><rect x="63.1138%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="527" fg:w="2"/><text x="63.3638%" y="575.50"></text></g><g><title>            ss.run_optimizer(self.raw_data_matrix, plot=False, solver=solver_convex) (2 samples, 0.24%)</title><rect x="63.1138%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="527" fg:w="2"/><text x="63.3638%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:273 (run_pipeline) (2 samples, 0.24%)</title><rect x="63.1138%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="527" fg:w="2"/><text x="63.3638%" y="619.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="63.1138%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="527" fg:w="2"/><text x="63.3638%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="63.1138%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="527" fg:w="2"/><text x="63.3638%" y="663.50"></text></g><g><title>        self._model.setup(*unpacked_data, **settings) (7 samples, 0.84%)</title><rect x="62.8743%" y="144" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/osqp/interface.py:37 (setup) (7 samples, 0.84%)</title><rect x="62.8743%" y="166" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="179.50"></text></g><g><title>                solver.setup(P, q, A, lA, uA, verbose=verbose, **solver_opts) (7 samples, 0.84%)</title><rect x="62.8743%" y="188" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/qp_solvers/osqp_qpif.py:102 (solve_via_data) (7 samples, 0.84%)</title><rect x="62.8743%" y="210" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="223.50"></text></g><g><title>        return self.solver.solve_via_data(data, warm_start, verbose, (7 samples, 0.84%)</title><rect x="62.8743%" y="232" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/solving_chain.py:423 (solve_via_data) (7 samples, 0.84%)</title><rect x="62.8743%" y="254" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="267.50"></text></g><g><title>        solution = solving_chain.solve_via_data( (7 samples, 0.84%)</title><rect x="62.8743%" y="276" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:1066 (_solve) (7 samples, 0.84%)</title><rect x="62.8743%" y="298" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="311.50"></text></g><g><title>        return solve_func(self, *args, **kwargs) (7 samples, 0.84%)</title><rect x="62.8743%" y="320" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:495 (solve) (7 samples, 0.84%)</title><rect x="62.8743%" y="342" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="355.50"></text></g><g><title>        cvx_prob.solve(solver=solver, **solver_kwargs) (7 samples, 0.84%)</title><rect x="62.8743%" y="364" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:200 (_solve_cvx) (7 samples, 0.84%)</title><rect x="62.8743%" y="386" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="399.50"></text></g><g><title>            result = self._solve_cvx(canonical_form, solver, **kwargs) (7 samples, 0.84%)</title><rect x="62.8743%" y="408" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:93 (decompose) (7 samples, 0.84%)</title><rect x="62.8743%" y="430" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="525" fg:w="7"/><text x="63.1243%" y="443.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_rel=1e-6, eps_abs=1e-6) (3 samples, 0.36%)</title><rect x="63.3533%" y="452" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:277 (_osd_l2_l1d2_constrained) (3 samples, 0.36%)</title><rect x="63.3533%" y="474" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="487.50"></text></g><g><title>        res = _osd_l2_l1d2_constrained( (3 samples, 0.36%)</title><rect x="63.3533%" y="496" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:259 (l2_l1d2_constrained) (3 samples, 0.36%)</title><rect x="63.3533%" y="518" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="531.50"></text></g><g><title>        out = l2_l1d2_constrained(y, w1=weight, solver=solver) (3 samples, 0.36%)</title><rect x="63.3533%" y="540" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:373 (get_l2_l1d2) (3 samples, 0.36%)</title><rect x="63.3533%" y="562" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="575.50"></text></g><g><title>            self.get_l2_l1d2(y_rs, weight=weight, solver=solver) (3 samples, 0.36%)</title><rect x="63.3533%" y="584" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:139 (pointmass_detection) (3 samples, 0.36%)</title><rect x="63.3533%" y="606" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="619.50"></text></g><g><title>        self.pointmass_detection( (3 samples, 0.36%)</title><rect x="63.3533%" y="628" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:75 (check_clipping) (3 samples, 0.36%)</title><rect x="63.3533%" y="650" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="663.50"></text></g><g><title>        self.clipping_analysis.check_clipping( (3 samples, 0.36%)</title><rect x="63.3533%" y="672" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:868 (clipping_check) (3 samples, 0.36%)</title><rect x="63.3533%" y="694" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="707.50"></text></g><g><title>            self.clipping_check(solver=solver_convex) (3 samples, 0.36%)</title><rect x="63.3533%" y="716" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="729.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:375 (run_pipeline) (3 samples, 0.36%)</title><rect x="63.3533%" y="738" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="751.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="63.3533%" y="760" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="773.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="63.3533%" y="782" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="529" fg:w="3"/><text x="63.6033%" y="795.50"></text></g><g><title>        self._running_crc = crc32(newdata, self._running_crc) (6 samples, 0.72%)</title><rect x="63.8323%" y="144" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="157.50"></text></g><g><title>/usr/lib64/python3.9/zipfile.py:939 (_update_crc) (6 samples, 0.72%)</title><rect x="63.8323%" y="166" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="179.50"></text></g><g><title>        self._update_crc(data) (6 samples, 0.72%)</title><rect x="63.8323%" y="188" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="201.50"></text></g><g><title>/usr/lib64/python3.9/zipfile.py:1014 (_read1) (6 samples, 0.72%)</title><rect x="63.8323%" y="210" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="223.50"></text></g><g><title>                data = self._read1(n) (6 samples, 0.72%)</title><rect x="63.8323%" y="232" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="245.50"></text></g><g><title>/usr/lib64/python3.9/zipfile.py:970 (read1) (6 samples, 0.72%)</title><rect x="63.8323%" y="254" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="267.50"></text></g><g><title>                chunks = self._reader.read_low_memory(nrows) (6 samples, 0.72%)</title><rect x="63.8323%" y="276" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py:234 (read) (6 samples, 0.72%)</title><rect x="63.8323%" y="298" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="311.50"></text></g><g><title>                ) = self._engine.read(  # type: ignore[attr-defined] (6 samples, 0.72%)</title><rect x="63.8323%" y="320" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/readers.py:1748 (read) (6 samples, 0.72%)</title><rect x="63.8323%" y="342" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="355.50"></text></g><g><title>        return parser.read(nrows) (6 samples, 0.72%)</title><rect x="63.8323%" y="364" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/readers.py:617 (_read) (6 samples, 0.72%)</title><rect x="63.8323%" y="386" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="399.50"></text></g><g><title>    return _read(filepath_or_buffer, kwds) (6 samples, 0.72%)</title><rect x="63.8323%" y="408" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/readers.py:948 (read_csv) (6 samples, 0.72%)</title><rect x="63.8323%" y="430" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="443.50"></text></g><g><title>DATA_CORPUS = pd.read_csv( (6 samples, 0.72%)</title><rect x="63.8323%" y="452" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/shade.py:27 (&lt;module&gt;) (6 samples, 0.72%)</title><rect x="63.8323%" y="474" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="487.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="496" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="509.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (6 samples, 0.72%)</title><rect x="63.8323%" y="518" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="531.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="540" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="553.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (6 samples, 0.72%)</title><rect x="63.8323%" y="562" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="575.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="584" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="597.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (6 samples, 0.72%)</title><rect x="63.8323%" y="606" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="619.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="628" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="641.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (6 samples, 0.72%)</title><rect x="63.8323%" y="650" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="663.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="672" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="685.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (6 samples, 0.72%)</title><rect x="63.8323%" y="694" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="707.50"></text></g><g><title>from solardatatools.algorithms.shade import ShadeAnalysis (6 samples, 0.72%)</title><rect x="63.8323%" y="716" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="729.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/__init__.py:5 (&lt;module&gt;) (6 samples, 0.72%)</title><rect x="63.8323%" y="738" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="751.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="760" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="773.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (6 samples, 0.72%)</title><rect x="63.8323%" y="782" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="795.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="804" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="817.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (6 samples, 0.72%)</title><rect x="63.8323%" y="826" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="839.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="848" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="861.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (6 samples, 0.72%)</title><rect x="63.8323%" y="870" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="883.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="892" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="905.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (6 samples, 0.72%)</title><rect x="63.8323%" y="914" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="927.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="936" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="949.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (6 samples, 0.72%)</title><rect x="63.8323%" y="958" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="971.50"></text></g><g><title>from solardatatools.algorithms import SunriseSunset (6 samples, 0.72%)</title><rect x="63.8323%" y="980" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="993.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_filling.py:12 (&lt;module&gt;) (6 samples, 0.72%)</title><rect x="63.8323%" y="1002" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1015.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1024" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1037.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (6 samples, 0.72%)</title><rect x="63.8323%" y="1046" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1059.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1068" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1081.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (6 samples, 0.72%)</title><rect x="63.8323%" y="1090" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1103.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1112" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1125.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (6 samples, 0.72%)</title><rect x="63.8323%" y="1134" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1147.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1156" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1169.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (6 samples, 0.72%)</title><rect x="63.8323%" y="1178" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1191.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1200" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1213.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (6 samples, 0.72%)</title><rect x="63.8323%" y="1222" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1235.50"></text></g><g><title>from solardatatools.data_filling import zero_nighttime, interp_missing (6 samples, 0.72%)</title><rect x="63.8323%" y="1244" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1257.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:30 (&lt;module&gt;) (6 samples, 0.72%)</title><rect x="63.8323%" y="1266" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1279.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1288" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1301.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (6 samples, 0.72%)</title><rect x="63.8323%" y="1310" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1323.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1332" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1345.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (6 samples, 0.72%)</title><rect x="63.8323%" y="1354" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1367.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1376" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1389.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (6 samples, 0.72%)</title><rect x="63.8323%" y="1398" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1411.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1420" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1433.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (6 samples, 0.72%)</title><rect x="63.8323%" y="1442" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1455.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1464" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1477.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (6 samples, 0.72%)</title><rect x="63.8323%" y="1486" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1499.50"></text></g><g><title>from solardatatools.data_handler import DataHandler (6 samples, 0.72%)</title><rect x="63.8323%" y="1508" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1521.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/__init__.py:9 (&lt;module&gt;) (6 samples, 0.72%)</title><rect x="63.8323%" y="1530" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1543.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1552" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1565.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (6 samples, 0.72%)</title><rect x="63.8323%" y="1574" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1587.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1596" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1609.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (6 samples, 0.72%)</title><rect x="63.8323%" y="1618" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1631.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1640" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1653.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (6 samples, 0.72%)</title><rect x="63.8323%" y="1662" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1675.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1684" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1697.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (6 samples, 0.72%)</title><rect x="63.8323%" y="1706" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1719.50"></text></g><g><title> (6 samples, 0.72%)</title><rect x="63.8323%" y="1728" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1741.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (6 samples, 0.72%)</title><rect x="63.8323%" y="1750" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1763.50"></text></g><g><title>from solardatatools import DataHandler (6 samples, 0.72%)</title><rect x="63.8323%" y="1772" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1785.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:3 (&lt;module&gt;) (6 samples, 0.72%)</title><rect x="63.8323%" y="1794" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="533" fg:w="6"/><text x="64.0823%" y="1807.50"></text></g><g><title>        uk1 = uk + alpha * xk1 + (1 - alpha) * zk - zk1 (3 samples, 0.36%)</title><rect x="65.0299%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:201 (admm) (3 samples, 0.36%)</title><rect x="65.0299%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="179.50"></text></g><g><title>                self._iterates = admm.admm( (3 samples, 0.36%)</title><rect x="65.0299%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (3 samples, 0.36%)</title><rect x="65.0299%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="223.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (3 samples, 0.36%)</title><rect x="65.0299%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (3 samples, 0.36%)</title><rect x="65.0299%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="267.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (3 samples, 0.36%)</title><rect x="65.0299%" y="276" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (3 samples, 0.36%)</title><rect x="65.0299%" y="298" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="311.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (3 samples, 0.36%)</title><rect x="65.0299%" y="320" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="333.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="65.0299%" y="342" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="355.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="65.0299%" y="364" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="65.0299%" y="386" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="399.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="65.0299%" y="408" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (3 samples, 0.36%)</title><rect x="65.0299%" y="430" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="443.50"></text></g><g><title>            self.capacity_analysis.run( (3 samples, 0.36%)</title><rect x="65.0299%" y="452" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (3 samples, 0.36%)</title><rect x="65.0299%" y="474" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="487.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (3 samples, 0.36%)</title><rect x="65.0299%" y="496" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (3 samples, 0.36%)</title><rect x="65.0299%" y="518" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="531.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="65.0299%" y="540" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="65.0299%" y="562" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="543" fg:w="3"/><text x="65.2799%" y="575.50"></text></g><g><title>            alpha * xk1 + (1 - alpha) * zk + uk, (2 samples, 0.24%)</title><rect x="65.5090%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:197 (admm) (2 samples, 0.24%)</title><rect x="65.5090%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="179.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="65.5090%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="65.5090%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="223.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="65.5090%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="65.5090%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="267.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="65.5090%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="65.5090%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="311.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="65.5090%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="333.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="65.5090%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="355.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="65.5090%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="65.5090%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="399.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="65.5090%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="65.5090%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="443.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="65.5090%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="65.5090%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="487.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="65.5090%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="65.5090%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="531.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="65.5090%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="65.5090%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="547" fg:w="2"/><text x="65.7590%" y="575.50"></text></g><g><title>            cls = super().__new__(mcls, name, bases, namespace, **kwargs) (2 samples, 0.24%)</title><rect x="66.1078%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="552" fg:w="2"/><text x="66.3578%" y="157.50"></text></g><g><title>/usr/lib64/python3.9/abc.py:106 (__new__) (2 samples, 0.24%)</title><rect x="66.1078%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="552" fg:w="2"/><text x="66.3578%" y="179.50"></text></g><g><title>            data = self._decompressor.decompress(data, n) (20 samples, 2.40%)</title><rect x="66.3473%" y="144" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="157.50">..</text></g><g><title>/usr/lib64/python3.9/zipfile.py:1000 (_read1) (20 samples, 2.40%)</title><rect x="66.3473%" y="166" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="179.50">/..</text></g><g><title>                data = self._read1(n) (20 samples, 2.40%)</title><rect x="66.3473%" y="188" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="201.50">..</text></g><g><title>/usr/lib64/python3.9/zipfile.py:970 (read1) (20 samples, 2.40%)</title><rect x="66.3473%" y="210" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="223.50">/..</text></g><g><title>                chunks = self._reader.read_low_memory(nrows) (20 samples, 2.40%)</title><rect x="66.3473%" y="232" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="245.50">..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py:234 (read) (20 samples, 2.40%)</title><rect x="66.3473%" y="254" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="267.50">/..</text></g><g><title>                ) = self._engine.read(  # type: ignore[attr-defined] (20 samples, 2.40%)</title><rect x="66.3473%" y="276" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="289.50">..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/readers.py:1748 (read) (20 samples, 2.40%)</title><rect x="66.3473%" y="298" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="311.50">/..</text></g><g><title>        return parser.read(nrows) (20 samples, 2.40%)</title><rect x="66.3473%" y="320" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="333.50">..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/readers.py:617 (_read) (20 samples, 2.40%)</title><rect x="66.3473%" y="342" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="355.50">/..</text></g><g><title>    return _read(filepath_or_buffer, kwds) (20 samples, 2.40%)</title><rect x="66.3473%" y="364" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="377.50">..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/readers.py:948 (read_csv) (20 samples, 2.40%)</title><rect x="66.3473%" y="386" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="399.50">/..</text></g><g><title>DATA_CORPUS = pd.read_csv( (20 samples, 2.40%)</title><rect x="66.3473%" y="408" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="421.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/shade.py:27 (&lt;module&gt;) (20 samples, 2.40%)</title><rect x="66.3473%" y="430" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="443.50">/..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="452" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="465.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (20 samples, 2.40%)</title><rect x="66.3473%" y="474" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="487.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="496" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="509.50">..</text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (20 samples, 2.40%)</title><rect x="66.3473%" y="518" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="531.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="540" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="553.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (20 samples, 2.40%)</title><rect x="66.3473%" y="562" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="575.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="584" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="597.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (20 samples, 2.40%)</title><rect x="66.3473%" y="606" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="619.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="628" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="641.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (20 samples, 2.40%)</title><rect x="66.3473%" y="650" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="663.50">&lt;..</text></g><g><title>from solardatatools.algorithms.shade import ShadeAnalysis (20 samples, 2.40%)</title><rect x="66.3473%" y="672" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="685.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/__init__.py:5 (&lt;module&gt;) (20 samples, 2.40%)</title><rect x="66.3473%" y="694" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="707.50">/..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="716" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="729.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (20 samples, 2.40%)</title><rect x="66.3473%" y="738" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="751.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="760" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="773.50">..</text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (20 samples, 2.40%)</title><rect x="66.3473%" y="782" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="795.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="804" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="817.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (20 samples, 2.40%)</title><rect x="66.3473%" y="826" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="839.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="848" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="861.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (20 samples, 2.40%)</title><rect x="66.3473%" y="870" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="883.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="892" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="905.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (20 samples, 2.40%)</title><rect x="66.3473%" y="914" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="927.50">&lt;..</text></g><g><title>from solardatatools.algorithms import SunriseSunset (20 samples, 2.40%)</title><rect x="66.3473%" y="936" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="949.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_filling.py:12 (&lt;module&gt;) (20 samples, 2.40%)</title><rect x="66.3473%" y="958" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="971.50">/..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="980" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="993.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (20 samples, 2.40%)</title><rect x="66.3473%" y="1002" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1015.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1024" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1037.50">..</text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (20 samples, 2.40%)</title><rect x="66.3473%" y="1046" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1059.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1068" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1081.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (20 samples, 2.40%)</title><rect x="66.3473%" y="1090" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1103.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1112" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1125.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (20 samples, 2.40%)</title><rect x="66.3473%" y="1134" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1147.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1156" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1169.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (20 samples, 2.40%)</title><rect x="66.3473%" y="1178" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1191.50">&lt;..</text></g><g><title>from solardatatools.data_filling import zero_nighttime, interp_missing (20 samples, 2.40%)</title><rect x="66.3473%" y="1200" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1213.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:30 (&lt;module&gt;) (20 samples, 2.40%)</title><rect x="66.3473%" y="1222" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1235.50">/..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1244" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1257.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (20 samples, 2.40%)</title><rect x="66.3473%" y="1266" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1279.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1288" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1301.50">..</text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (20 samples, 2.40%)</title><rect x="66.3473%" y="1310" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1323.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1332" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1345.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (20 samples, 2.40%)</title><rect x="66.3473%" y="1354" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1367.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1376" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1389.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (20 samples, 2.40%)</title><rect x="66.3473%" y="1398" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1411.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1420" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1433.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (20 samples, 2.40%)</title><rect x="66.3473%" y="1442" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1455.50">&lt;..</text></g><g><title>from solardatatools.data_handler import DataHandler (20 samples, 2.40%)</title><rect x="66.3473%" y="1464" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1477.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/__init__.py:9 (&lt;module&gt;) (20 samples, 2.40%)</title><rect x="66.3473%" y="1486" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1499.50">/..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1508" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1521.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (20 samples, 2.40%)</title><rect x="66.3473%" y="1530" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1543.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1552" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1565.50">..</text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (20 samples, 2.40%)</title><rect x="66.3473%" y="1574" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1587.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1596" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1609.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (20 samples, 2.40%)</title><rect x="66.3473%" y="1618" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1631.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1640" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1653.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (20 samples, 2.40%)</title><rect x="66.3473%" y="1662" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1675.50">&lt;..</text></g><g><title> (20 samples, 2.40%)</title><rect x="66.3473%" y="1684" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1697.50">..</text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (20 samples, 2.40%)</title><rect x="66.3473%" y="1706" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1719.50">&lt;..</text></g><g><title>from solardatatools import DataHandler (20 samples, 2.40%)</title><rect x="66.3473%" y="1728" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1741.50">..</text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:3 (&lt;module&gt;) (20 samples, 2.40%)</title><rect x="66.3473%" y="1750" width="2.3952%" height="21" fill="rgb(255,226,226)" fg:x="554" fg:w="20"/><text x="66.5973%" y="1763.50">/..</text></g><g><title>            if col_axis &gt; row_axis: (2 samples, 0.24%)</title><rect x="68.9820%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/linalg/linalg.py:2613 (norm) (2 samples, 0.24%)</title><rect x="68.9820%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="179.50"></text></g><g><title>        r_prim = np.linalg.norm(A @ zk1 - b, ord=np.inf) (2 samples, 0.24%)</title><rect x="68.9820%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:206 (admm) (2 samples, 0.24%)</title><rect x="68.9820%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="223.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="68.9820%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="68.9820%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="267.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="68.9820%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="68.9820%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="311.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="68.9820%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="68.9820%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="355.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="68.9820%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="68.9820%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="399.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="68.9820%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="68.9820%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="443.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="68.9820%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="68.9820%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="487.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="68.9820%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="68.9820%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="531.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="68.9820%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="68.9820%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="575.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="68.9820%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="68.9820%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="576" fg:w="2"/><text x="69.2320%" y="619.50"></text></g><g><title>            if self.col.max() &gt;= self.shape[1]: (2 samples, 0.24%)</title><rect x="69.3413%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:292 (_check) (2 samples, 0.24%)</title><rect x="69.3413%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="179.50"></text></g><g><title>        self._check() (2 samples, 0.24%)</title><rect x="69.3413%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:204 (__init__) (2 samples, 0.24%)</title><rect x="69.3413%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="223.50"></text></g><g><title>        return self.__class__((self.data, (self.col, self.row)), (2 samples, 0.24%)</title><rect x="69.3413%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:306 (transpose) (2 samples, 0.24%)</title><rect x="69.3413%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="267.50"></text></g><g><title>        return self.transpose() (2 samples, 0.24%)</title><rect x="69.3413%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:727 (T) (2 samples, 0.24%)</title><rect x="69.3413%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="311.50"></text></g><g><title>        r_dual = np.linalg.norm(P @ zk1 + q + A.T @ nuk1 + rho_vec * uk1, ord=np.inf) (2 samples, 0.24%)</title><rect x="69.3413%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:207 (admm) (2 samples, 0.24%)</title><rect x="69.3413%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="355.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="69.3413%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="69.3413%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="399.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="69.3413%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="69.3413%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="443.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="69.3413%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="465.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="69.3413%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="487.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="69.3413%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="69.3413%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="531.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="69.3413%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="69.3413%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="575.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="69.3413%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="69.3413%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="619.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="69.3413%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="69.3413%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="663.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="69.3413%" y="672" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="69.3413%" y="694" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="707.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="69.3413%" y="716" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="729.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="69.3413%" y="738" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="579" fg:w="2"/><text x="69.5913%" y="751.50"></text></g><g><title>            if self.data.ndim != 1 or self.row.ndim != 1 or \ (2 samples, 0.24%)</title><rect x="69.7006%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="582" fg:w="2"/><text x="69.9506%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:254 (_getnnz) (2 samples, 0.24%)</title><rect x="69.7006%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="582" fg:w="2"/><text x="69.9506%" y="179.50"></text></g><g><title>        return self._getnnz() (2 samples, 0.24%)</title><rect x="69.7006%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="582" fg:w="2"/><text x="69.9506%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:294 (nnz) (2 samples, 0.24%)</title><rect x="69.7006%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="582" fg:w="2"/><text x="69.9506%" y="223.50"></text></g><g><title>            if self.row.min() &lt; 0: (3 samples, 0.36%)</title><rect x="69.9401%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:294 (_check) (3 samples, 0.36%)</title><rect x="69.9401%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="179.50"></text></g><g><title>        self._check() (3 samples, 0.36%)</title><rect x="69.9401%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:204 (__init__) (3 samples, 0.36%)</title><rect x="69.9401%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="223.50"></text></g><g><title>        return self.__class__((self.data, (self.col, self.row)), (3 samples, 0.36%)</title><rect x="69.9401%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_coo.py:306 (transpose) (3 samples, 0.36%)</title><rect x="69.9401%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="267.50"></text></g><g><title>            ret = self.transpose()._mul_dispatch(tr) (3 samples, 0.36%)</title><rect x="69.9401%" y="276" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:608 (_rmul_dispatch) (3 samples, 0.36%)</title><rect x="69.9401%" y="298" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="311.50"></text></g><g><title>        return self._rmul_dispatch(other) (3 samples, 0.36%)</title><rect x="69.9401%" y="320" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:630 (__rmatmul__) (3 samples, 0.36%)</title><rect x="69.9401%" y="342" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="355.50"></text></g><g><title>    return (0.5 * zk1 @ P @ zk1 + q @ zk1 + r) / obj_scale + g.evaluate( (3 samples, 0.36%)</title><rect x="69.9401%" y="364" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/util.py:93 (evaluate_objective) (3 samples, 0.36%)</title><rect x="69.9401%" y="386" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="399.50"></text></g><g><title>        obj_val = util.evaluate_objective(P, q, r, g, zk1, obj_scale, equil_scaling) (3 samples, 0.36%)</title><rect x="69.9401%" y="408" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="421.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:208 (admm) (3 samples, 0.36%)</title><rect x="69.9401%" y="430" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="443.50"></text></g><g><title>                self._iterates = admm.admm( (3 samples, 0.36%)</title><rect x="69.9401%" y="452" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="465.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (3 samples, 0.36%)</title><rect x="69.9401%" y="474" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="487.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (3 samples, 0.36%)</title><rect x="69.9401%" y="496" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="509.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (3 samples, 0.36%)</title><rect x="69.9401%" y="518" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="531.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (3 samples, 0.36%)</title><rect x="69.9401%" y="540" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="553.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (3 samples, 0.36%)</title><rect x="69.9401%" y="562" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="575.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (3 samples, 0.36%)</title><rect x="69.9401%" y="584" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="69.9401%" y="606" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="619.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="69.9401%" y="628" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="69.9401%" y="650" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="663.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="69.9401%" y="672" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="685.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (3 samples, 0.36%)</title><rect x="69.9401%" y="694" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="707.50"></text></g><g><title>            self.capacity_analysis.run( (3 samples, 0.36%)</title><rect x="69.9401%" y="716" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="729.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (3 samples, 0.36%)</title><rect x="69.9401%" y="738" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="751.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (3 samples, 0.36%)</title><rect x="69.9401%" y="760" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="773.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (3 samples, 0.36%)</title><rect x="69.9401%" y="782" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="795.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="69.9401%" y="804" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="817.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="69.9401%" y="826" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="584" fg:w="3"/><text x="70.1901%" y="839.50"></text></g><g><title>            kkt_solve = kkt_system.solve(np.concatenate([-q + rho_vec * (zk - uk), b])) (7 samples, 0.84%)</title><rect x="70.5389%" y="144" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:187 (admm) (7 samples, 0.84%)</title><rect x="70.5389%" y="166" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="179.50"></text></g><g><title>                self._iterates = admm.admm( (7 samples, 0.84%)</title><rect x="70.5389%" y="188" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (7 samples, 0.84%)</title><rect x="70.5389%" y="210" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="223.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (7 samples, 0.84%)</title><rect x="70.5389%" y="232" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (7 samples, 0.84%)</title><rect x="70.5389%" y="254" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="267.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (7 samples, 0.84%)</title><rect x="70.5389%" y="276" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (7 samples, 0.84%)</title><rect x="70.5389%" y="298" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="311.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (7 samples, 0.84%)</title><rect x="70.5389%" y="320" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="333.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (7 samples, 0.84%)</title><rect x="70.5389%" y="342" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="355.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (7 samples, 0.84%)</title><rect x="70.5389%" y="364" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (7 samples, 0.84%)</title><rect x="70.5389%" y="386" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="399.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (7 samples, 0.84%)</title><rect x="70.5389%" y="408" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (7 samples, 0.84%)</title><rect x="70.5389%" y="430" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="443.50"></text></g><g><title>            self.capacity_analysis.run( (7 samples, 0.84%)</title><rect x="70.5389%" y="452" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (7 samples, 0.84%)</title><rect x="70.5389%" y="474" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="487.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (7 samples, 0.84%)</title><rect x="70.5389%" y="496" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (7 samples, 0.84%)</title><rect x="70.5389%" y="518" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="531.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (7 samples, 0.84%)</title><rect x="70.5389%" y="540" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (7 samples, 0.84%)</title><rect x="70.5389%" y="562" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="589" fg:w="7"/><text x="70.7889%" y="575.50"></text></g><g><title>            output[start_index:end_index] = func.evaluate(v[start_index:end_index]) (2 samples, 0.24%)</title><rect x="71.4970%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:598 (evaluate) (2 samples, 0.24%)</title><rect x="71.4970%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="179.50"></text></g><g><title>    return (0.5 * zk1 @ P @ zk1 + q @ zk1 + r) / obj_scale + g.evaluate( (2 samples, 0.24%)</title><rect x="71.4970%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/util.py:93 (evaluate_objective) (2 samples, 0.24%)</title><rect x="71.4970%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="223.50"></text></g><g><title>        obj_val = util.evaluate_objective(P, q, r, g, zk1, obj_scale, equil_scaling) (2 samples, 0.24%)</title><rect x="71.4970%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:208 (admm) (2 samples, 0.24%)</title><rect x="71.4970%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="267.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="71.4970%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="71.4970%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="311.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="71.4970%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="71.4970%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="355.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="71.4970%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="71.4970%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="399.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="71.4970%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="71.4970%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="443.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="71.4970%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="71.4970%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="487.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="71.4970%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="71.4970%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="531.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="71.4970%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="71.4970%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="575.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="71.4970%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="71.4970%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="619.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="71.4970%" y="628" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="71.4970%" y="650" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="597" fg:w="2"/><text x="71.7470%" y="663.50"></text></g><g><title>            raise ValueError(&quot;Invalid integer data type %r.&quot; % (self.kind,)) (3 samples, 0.36%)</title><rect x="71.8563%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="600" fg:w="3"/><text x="72.1063%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/getlimits.py:694 (__init__) (3 samples, 0.36%)</title><rect x="71.8563%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="600" fg:w="3"/><text x="72.1063%" y="179.50"></text></g><g><title>    int32min = np.int32(np.iinfo(np.int32).min) (2 samples, 0.24%)</title><rect x="71.9760%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="601" fg:w="2"/><text x="72.2260%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_sputils.py:169 (get_index_dtype) (2 samples, 0.24%)</title><rect x="71.9760%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="601" fg:w="2"/><text x="72.2260%" y="223.50"></text></g><g><title>        return get_index_dtype(arrays, maxval, (check_contents and not self._is_array)) (2 samples, 0.24%)</title><rect x="71.9760%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="601" fg:w="2"/><text x="72.2260%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_base.py:1289 (_get_index_dtype) (2 samples, 0.24%)</title><rect x="71.9760%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="601" fg:w="2"/><text x="72.2260%" y="267.50"></text></g><g><title>        r_dual = np.linalg.norm(P @ zk1 + q + A.T @ nuk1 + rho_vec * uk1, ord=np.inf) (3 samples, 0.36%)</title><rect x="72.2156%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:207 (admm) (3 samples, 0.36%)</title><rect x="72.2156%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="223.50"></text></g><g><title>                self._iterates = admm.admm( (3 samples, 0.36%)</title><rect x="72.2156%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (3 samples, 0.36%)</title><rect x="72.2156%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="267.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (3 samples, 0.36%)</title><rect x="72.2156%" y="276" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (3 samples, 0.36%)</title><rect x="72.2156%" y="298" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="311.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (3 samples, 0.36%)</title><rect x="72.2156%" y="320" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (3 samples, 0.36%)</title><rect x="72.2156%" y="342" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="355.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (3 samples, 0.36%)</title><rect x="72.2156%" y="364" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="72.2156%" y="386" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="399.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="72.2156%" y="408" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (3 samples, 0.36%)</title><rect x="72.2156%" y="430" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="443.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (3 samples, 0.36%)</title><rect x="72.2156%" y="452" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (3 samples, 0.36%)</title><rect x="72.2156%" y="474" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="487.50"></text></g><g><title>            self.capacity_analysis.run( (3 samples, 0.36%)</title><rect x="72.2156%" y="496" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (3 samples, 0.36%)</title><rect x="72.2156%" y="518" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="531.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (3 samples, 0.36%)</title><rect x="72.2156%" y="540" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (3 samples, 0.36%)</title><rect x="72.2156%" y="562" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="575.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="72.2156%" y="584" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="72.2156%" y="606" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="603" fg:w="3"/><text x="72.4656%" y="619.50"></text></g><g><title>            return abs(x).max(axis=axis, keepdims=keepdims) (5 samples, 0.60%)</title><rect x="72.2156%" y="144" width="0.5988%" height="21" fill="rgb(255,238,238)" fg:x="603" fg:w="5"/><text x="72.4656%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/linalg/linalg.py:2571 (norm) (5 samples, 0.60%)</title><rect x="72.2156%" y="166" width="0.5988%" height="21" fill="rgb(255,238,238)" fg:x="603" fg:w="5"/><text x="72.4656%" y="179.50"></text></g><g><title>    ss_smoothed = tl1_l2d2p365( (2 samples, 0.24%)</title><rect x="73.0539%" y="1552" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="610" fg:w="2"/><text x="73.3039%" y="1565.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/sunrise_sunset.py:37 (rise_set_smoothed) (2 samples, 0.24%)</title><rect x="73.0539%" y="1574" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="610" fg:w="2"/><text x="73.3039%" y="1587.50"></text></g><g><title>                    sr_smoothed = tl1_l2d2p365( (7 samples, 0.84%)</title><rect x="73.4132%" y="1552" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="613" fg:w="7"/><text x="73.6632%" y="1565.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/sunrise_sunset_estimation.py:231 (run_optimizer) (7 samples, 0.84%)</title><rect x="73.4132%" y="1574" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="613" fg:w="7"/><text x="73.6632%" y="1587.50"></text></g><g><title>            ss.run_optimizer(self.raw_data_matrix, plot=False, solver=solver_convex) (7 samples, 0.84%)</title><rect x="73.4132%" y="1596" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="613" fg:w="7"/><text x="73.6632%" y="1609.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:273 (run_pipeline) (7 samples, 0.84%)</title><rect x="73.4132%" y="1618" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="613" fg:w="7"/><text x="73.6632%" y="1631.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (7 samples, 0.84%)</title><rect x="73.4132%" y="1640" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="613" fg:w="7"/><text x="73.6632%" y="1653.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (7 samples, 0.84%)</title><rect x="73.4132%" y="1662" width="0.8383%" height="21" fill="rgb(255,236,236)" fg:x="613" fg:w="7"/><text x="73.6632%" y="1675.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose) (16 samples, 1.92%)</title><rect x="72.9341%" y="1464" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="609" fg:w="16"/><text x="73.1841%" y="1477.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:163 (_osd_tl1_l2d2p365) (16 samples, 1.92%)</title><rect x="72.9341%" y="1486" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="609" fg:w="16"/><text x="73.1841%" y="1499.50"></text></g><g><title>        res = _osd_tl1_l2d2p365( (16 samples, 1.92%)</title><rect x="72.9341%" y="1508" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="609" fg:w="16"/><text x="73.1841%" y="1521.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:157 (tl1_l2d2p365) (16 samples, 1.92%)</title><rect x="72.9341%" y="1530" width="1.9162%" height="21" fill="rgb(255,229,229)" fg:x="609" fg:w="16"/><text x="73.1841%" y="1543.50"></text></g><g><title>                    ss_smoothed = tl1_l2d2p365( (5 samples, 0.60%)</title><rect x="74.2515%" y="1552" width="0.5988%" height="21" fill="rgb(255,238,238)" fg:x="620" fg:w="5"/><text x="74.5015%" y="1565.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/sunrise_sunset_estimation.py:234 (run_optimizer) (5 samples, 0.60%)</title><rect x="74.2515%" y="1574" width="0.5988%" height="21" fill="rgb(255,238,238)" fg:x="620" fg:w="5"/><text x="74.5015%" y="1587.50"></text></g><g><title>            ss.run_optimizer(self.raw_data_matrix, plot=False, solver=solver_convex) (5 samples, 0.60%)</title><rect x="74.2515%" y="1596" width="0.5988%" height="21" fill="rgb(255,238,238)" fg:x="620" fg:w="5"/><text x="74.5015%" y="1609.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:273 (run_pipeline) (5 samples, 0.60%)</title><rect x="74.2515%" y="1618" width="0.5988%" height="21" fill="rgb(255,238,238)" fg:x="620" fg:w="5"/><text x="74.5015%" y="1631.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (5 samples, 0.60%)</title><rect x="74.2515%" y="1640" width="0.5988%" height="21" fill="rgb(255,238,238)" fg:x="620" fg:w="5"/><text x="74.5015%" y="1653.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (5 samples, 0.60%)</title><rect x="74.2515%" y="1662" width="0.5988%" height="21" fill="rgb(255,238,238)" fg:x="620" fg:w="5"/><text x="74.5015%" y="1675.50"></text></g><g><title>            return less_equal(abs(x-y), atol + rtol * abs(y)) (142 samples, 17.01%)</title><rect x="72.9341%" y="144" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="157.50">            return..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/numeric.py:2332 (within_tol) (142 samples, 17.01%)</title><rect x="72.9341%" y="166" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="179.50">/home/ec2-user/.ven..</text></g><g><title>        return within_tol(x, y, atol, rtol) (142 samples, 17.01%)</title><rect x="72.9341%" y="188" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="201.50">        return wit..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/numeric.py:2351 (isclose) (142 samples, 17.01%)</title><rect x="72.9341%" y="210" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="223.50">/home/ec2-user/.ven..</text></g><g><title>    res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan)) (142 samples, 17.01%)</title><rect x="72.9341%" y="232" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="245.50">    res = all(iscl..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/numpy/core/numeric.py:2241 (allclose) (142 samples, 17.01%)</title><rect x="72.9341%" y="254" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="267.50">/home/ec2-user/.ven..</text></g><g><title>    return np.allclose(off_diagonal_elements, 0) (142 samples, 17.01%)</title><rect x="72.9341%" y="276" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="289.50">    return np.allc..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/linalg.py:45 (is_diagonal) (142 samples, 17.01%)</title><rect x="72.9341%" y="298" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="311.50">/home/ec2-user/.ven..</text></g><g><title>    if is_diagonal(A): (142 samples, 17.01%)</title><rect x="72.9341%" y="320" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="333.50">    if is_diagonal..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/linalg.py:77 (is_psd_within_tol) (142 samples, 17.01%)</title><rect x="72.9341%" y="342" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="355.50">/home/ec2-user/.ven..</text></g><g><title>            self._nsd_test = eig_util.is_psd_within_tol(-self.value, EIGVAL_TOL) (142 samples, 17.01%)</title><rect x="72.9341%" y="364" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="377.50">            self._..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/constants/constant.py:244 (is_nsd) (142 samples, 17.01%)</title><rect x="72.9341%" y="386" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="399.50">/home/ec2-user/.ven..</text></g><g><title>        result = func(self, *args, **kwargs) (142 samples, 17.01%)</title><rect x="72.9341%" y="408" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="421.50">        result = f..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (142 samples, 17.01%)</title><rect x="72.9341%" y="430" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="443.50">/home/ec2-user/.ven..</text></g><g><title>        return P.is_constant() and P.is_nsd() (142 samples, 17.01%)</title><rect x="72.9341%" y="452" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="465.50">        return P.i..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/quad_form.py:74 (is_atom_concave) (142 samples, 17.01%)</title><rect x="72.9341%" y="474" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="487.50">/home/ec2-user/.ven..</text></g><g><title>        elif self.is_atom_concave(): (142 samples, 17.01%)</title><rect x="72.9341%" y="496" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="509.50">        elif self...</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:193 (is_concave) (142 samples, 17.01%)</title><rect x="72.9341%" y="518" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="531.50">/home/ec2-user/.ven..</text></g><g><title>        result = func(self, *args, **kwargs) (142 samples, 17.01%)</title><rect x="72.9341%" y="540" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="553.50">        result = f..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (142 samples, 17.01%)</title><rect x="72.9341%" y="562" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="575.50">/home/ec2-user/.ven..</text></g><g><title>        return self.is_constant() or (self.is_convex() and self.is_concave()) (142 samples, 17.01%)</title><rect x="72.9341%" y="584" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="597.50">        return sel..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/expression.py:212 (is_affine) (142 samples, 17.01%)</title><rect x="72.9341%" y="606" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="619.50">/home/ec2-user/.ven..</text></g><g><title>        result = func(self, *args, **kwargs) (142 samples, 17.01%)</title><rect x="72.9341%" y="628" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="641.50">        result = f..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (142 samples, 17.01%)</title><rect x="72.9341%" y="650" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="663.50">/home/ec2-user/.ven..</text></g><g><title>                if not (arg.is_affine() or (142 samples, 17.01%)</title><rect x="72.9341%" y="672" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="685.50">                if..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:178 (is_convex) (142 samples, 17.01%)</title><rect x="72.9341%" y="694" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="707.50">/home/ec2-user/.ven..</text></g><g><title>        result = func(self, *args, **kwargs) (142 samples, 17.01%)</title><rect x="72.9341%" y="716" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="729.50">        result = f..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (142 samples, 17.01%)</title><rect x="72.9341%" y="738" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="751.50">/home/ec2-user/.ven..</text></g><g><title>        return self.is_constant() or (self.is_convex() and self.is_concave()) (142 samples, 17.01%)</title><rect x="72.9341%" y="760" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="773.50">        return sel..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/expressions/expression.py:212 (is_affine) (142 samples, 17.01%)</title><rect x="72.9341%" y="782" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="795.50">/home/ec2-user/.ven..</text></g><g><title>        result = func(self, *args, **kwargs) (142 samples, 17.01%)</title><rect x="72.9341%" y="804" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="817.50">        result = f..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (142 samples, 17.01%)</title><rect x="72.9341%" y="826" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="839.50">/home/ec2-user/.ven..</text></g><g><title>                if not (arg.is_affine() or (142 samples, 17.01%)</title><rect x="72.9341%" y="848" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="861.50">                if..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/atoms/atom.py:178 (is_convex) (142 samples, 17.01%)</title><rect x="72.9341%" y="870" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="883.50">/home/ec2-user/.ven..</text></g><g><title>        result = func(self, *args, **kwargs) (142 samples, 17.01%)</title><rect x="72.9341%" y="892" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="905.50">        result = f..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (142 samples, 17.01%)</title><rect x="72.9341%" y="914" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="927.50">/home/ec2-user/.ven..</text></g><g><title>        return self.args[0].is_convex() (142 samples, 17.01%)</title><rect x="72.9341%" y="936" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="949.50">        return sel..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/objective.py:153 (is_dcp) (142 samples, 17.01%)</title><rect x="72.9341%" y="958" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="971.50">/home/ec2-user/.ven..</text></g><g><title>          expr.is_dcp(dpp) for expr in self.constraints + [self.objective]) (142 samples, 17.01%)</title><rect x="72.9341%" y="980" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="993.50">          expr.is_..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:257 (&lt;genexpr&gt;) (142 samples, 17.01%)</title><rect x="72.9341%" y="1002" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1015.50">/home/ec2-user/.ven..</text></g><g><title>        return all( (142 samples, 17.01%)</title><rect x="72.9341%" y="1024" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1037.50">        return all..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:256 (is_dcp) (142 samples, 17.01%)</title><rect x="72.9341%" y="1046" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1059.50">/home/ec2-user/.ven..</text></g><g><title>        result = func(self, *args, **kwargs) (142 samples, 17.01%)</title><rect x="72.9341%" y="1068" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1081.50">        result = f..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/utilities/performance_utils.py:73 (_compute_once) (142 samples, 17.01%)</title><rect x="72.9341%" y="1090" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1103.50">/home/ec2-user/.ven..</text></g><g><title>    if not gp and not problem.is_dcp(): (142 samples, 17.01%)</title><rect x="72.9341%" y="1112" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1125.50">    if not gp and ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/solving_chain.py:107 (_reductions_for_problem_class) (142 samples, 17.01%)</title><rect x="72.9341%" y="1134" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1147.50">/home/ec2-user/.ven..</text></g><g><title>    reductions = _reductions_for_problem_class(problem, candidates, gp, solver_opts) (142 samples, 17.01%)</title><rect x="72.9341%" y="1156" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1169.50">    reductions = _..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/reductions/solvers/solving_chain.py:197 (construct_solving_chain) (142 samples, 17.01%)</title><rect x="72.9341%" y="1178" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1191.50">/home/ec2-user/.ven..</text></g><g><title>        return construct_solving_chain(self, candidate_solvers, gp=gp, (142 samples, 17.01%)</title><rect x="72.9341%" y="1200" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1213.50">        return con..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:885 (_construct_chain) (142 samples, 17.01%)</title><rect x="72.9341%" y="1222" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1235.50">/home/ec2-user/.ven..</text></g><g><title>            solving_chain = self._construct_chain( (142 samples, 17.01%)</title><rect x="72.9341%" y="1244" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1257.50">            solvin..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:633 (get_problem_data) (142 samples, 17.01%)</title><rect x="72.9341%" y="1266" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1279.50">/home/ec2-user/.ven..</text></g><g><title>        data, solving_chain, inverse_data = self.get_problem_data( (142 samples, 17.01%)</title><rect x="72.9341%" y="1288" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1301.50">        data, solv..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:1056 (_solve) (142 samples, 17.01%)</title><rect x="72.9341%" y="1310" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1323.50">/home/ec2-user/.ven..</text></g><g><title>        return solve_func(self, *args, **kwargs) (142 samples, 17.01%)</title><rect x="72.9341%" y="1332" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1345.50">        return sol..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/cvxpy/problems/problem.py:495 (solve) (142 samples, 17.01%)</title><rect x="72.9341%" y="1354" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1367.50">/home/ec2-user/.ven..</text></g><g><title>        cvx_prob.solve(solver=solver, **solver_kwargs) (142 samples, 17.01%)</title><rect x="72.9341%" y="1376" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1389.50">        cvx_prob.s..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:200 (_solve_cvx) (142 samples, 17.01%)</title><rect x="72.9341%" y="1398" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1411.50">/home/ec2-user/.ven..</text></g><g><title>            result = self._solve_cvx(canonical_form, solver, **kwargs) (142 samples, 17.01%)</title><rect x="72.9341%" y="1420" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1433.50">            result..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:93 (decompose) (142 samples, 17.01%)</title><rect x="72.9341%" y="1442" width="17.0060%" height="21" fill="rgb(255,188,188)" fg:x="609" fg:w="142"/><text x="73.1841%" y="1455.50">/home/ec2-user/.ven..</text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_rel=1e-6, eps_abs=1e-6) (126 samples, 15.09%)</title><rect x="74.8503%" y="1464" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1477.50">    problem.deco..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:277 (_osd_l2_l1d2_constrained) (126 samples, 15.09%)</title><rect x="74.8503%" y="1486" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1499.50">/home/ec2-user/so..</text></g><g><title>        res = _osd_l2_l1d2_constrained( (126 samples, 15.09%)</title><rect x="74.8503%" y="1508" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1521.50">        res = _o..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:259 (l2_l1d2_constrained) (126 samples, 15.09%)</title><rect x="74.8503%" y="1530" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1543.50">/home/ec2-user/so..</text></g><g><title>        out = l2_l1d2_constrained(y, w1=weight, solver=solver) (126 samples, 15.09%)</title><rect x="74.8503%" y="1552" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1565.50">        out = l2..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:373 (get_l2_l1d2) (126 samples, 15.09%)</title><rect x="74.8503%" y="1574" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1587.50">/home/ec2-user/so..</text></g><g><title>            self.get_l2_l1d2(y_rs, weight=weight, solver=solver) (126 samples, 15.09%)</title><rect x="74.8503%" y="1596" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1609.50">            self..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:139 (pointmass_detection) (126 samples, 15.09%)</title><rect x="74.8503%" y="1618" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1631.50">/home/ec2-user/so..</text></g><g><title>        self.pointmass_detection( (126 samples, 15.09%)</title><rect x="74.8503%" y="1640" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1653.50">        self.poi..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/clipping.py:75 (check_clipping) (126 samples, 15.09%)</title><rect x="74.8503%" y="1662" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1675.50">/home/ec2-user/so..</text></g><g><title>        self.clipping_analysis.check_clipping( (126 samples, 15.09%)</title><rect x="74.8503%" y="1684" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1697.50">        self.cli..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:868 (clipping_check) (126 samples, 15.09%)</title><rect x="74.8503%" y="1706" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1719.50">/home/ec2-user/so..</text></g><g><title>            self.clipping_check(solver=solver_convex) (126 samples, 15.09%)</title><rect x="74.8503%" y="1728" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1741.50">            self..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:375 (run_pipeline) (126 samples, 15.09%)</title><rect x="74.8503%" y="1750" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1763.50">/home/ec2-user/so..</text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (126 samples, 15.09%)</title><rect x="74.8503%" y="1772" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1785.50">                ..</text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (126 samples, 15.09%)</title><rect x="74.8503%" y="1794" width="15.0898%" height="21" fill="rgb(255,191,191)" fg:x="625" fg:w="126"/><text x="75.1003%" y="1807.50">/home/ec2-user/so..</text></g><g><title>            rho_vec[start_index:end_index] = self.rho_by_block[index] (2 samples, 0.24%)</title><rect x="90.2994%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/util.py:126 (get_rho_vec) (2 samples, 0.24%)</title><rect x="90.2994%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="179.50"></text></g><g><title>        rho_vec = rho_controller.get_rho_vec() (2 samples, 0.24%)</title><rect x="90.2994%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:179 (admm) (2 samples, 0.24%)</title><rect x="90.2994%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="223.50"></text></g><g><title>                self._iterates = admm.admm( (2 samples, 0.24%)</title><rect x="90.2994%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (2 samples, 0.24%)</title><rect x="90.2994%" y="254" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="267.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (2 samples, 0.24%)</title><rect x="90.2994%" y="276" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (2 samples, 0.24%)</title><rect x="90.2994%" y="298" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="311.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (2 samples, 0.24%)</title><rect x="90.2994%" y="320" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (2 samples, 0.24%)</title><rect x="90.2994%" y="342" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="355.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (2 samples, 0.24%)</title><rect x="90.2994%" y="364" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="90.2994%" y="386" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="399.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="90.2994%" y="408" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (2 samples, 0.24%)</title><rect x="90.2994%" y="430" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="443.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (2 samples, 0.24%)</title><rect x="90.2994%" y="452" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (2 samples, 0.24%)</title><rect x="90.2994%" y="474" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="487.50"></text></g><g><title>            self.capacity_analysis.run( (2 samples, 0.24%)</title><rect x="90.2994%" y="496" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (2 samples, 0.24%)</title><rect x="90.2994%" y="518" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="531.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (2 samples, 0.24%)</title><rect x="90.2994%" y="540" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (2 samples, 0.24%)</title><rect x="90.2994%" y="562" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="575.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (2 samples, 0.24%)</title><rect x="90.2994%" y="584" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (2 samples, 0.24%)</title><rect x="90.2994%" y="606" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="754" fg:w="2"/><text x="90.5494%" y="619.50"></text></g><g><title>            rho_vec / obj_scale, (6 samples, 0.72%)</title><rect x="90.5389%" y="144" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:195 (admm) (6 samples, 0.72%)</title><rect x="90.5389%" y="166" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="179.50"></text></g><g><title>                self._iterates = admm.admm( (6 samples, 0.72%)</title><rect x="90.5389%" y="188" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (6 samples, 0.72%)</title><rect x="90.5389%" y="210" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="223.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (6 samples, 0.72%)</title><rect x="90.5389%" y="232" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (6 samples, 0.72%)</title><rect x="90.5389%" y="254" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="267.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (6 samples, 0.72%)</title><rect x="90.5389%" y="276" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (6 samples, 0.72%)</title><rect x="90.5389%" y="298" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="311.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (6 samples, 0.72%)</title><rect x="90.5389%" y="320" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="333.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (6 samples, 0.72%)</title><rect x="90.5389%" y="342" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="355.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (6 samples, 0.72%)</title><rect x="90.5389%" y="364" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (6 samples, 0.72%)</title><rect x="90.5389%" y="386" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="399.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (6 samples, 0.72%)</title><rect x="90.5389%" y="408" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (6 samples, 0.72%)</title><rect x="90.5389%" y="430" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="443.50"></text></g><g><title>            self.capacity_analysis.run( (6 samples, 0.72%)</title><rect x="90.5389%" y="452" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (6 samples, 0.72%)</title><rect x="90.5389%" y="474" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="487.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (6 samples, 0.72%)</title><rect x="90.5389%" y="496" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (6 samples, 0.72%)</title><rect x="90.5389%" y="518" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="531.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (6 samples, 0.72%)</title><rect x="90.5389%" y="540" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (6 samples, 0.72%)</title><rect x="90.5389%" y="562" width="0.7186%" height="21" fill="rgb(255,237,237)" fg:x="756" fg:w="6"/><text x="90.7889%" y="575.50"></text></g><g><title>            self.prox_raw(new_rho, new_scale * v - self._shift) + self._shift (4 samples, 0.48%)</title><rect x="91.2575%" y="144" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:50 (prox) (4 samples, 0.48%)</title><rect x="91.2575%" y="166" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="179.50"></text></g><g><title>            output[start_index:end_index] = func.prox( (4 samples, 0.48%)</title><rect x="91.2575%" y="188" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/proximal.py:608 (prox) (4 samples, 0.48%)</title><rect x="91.2575%" y="210" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="223.50"></text></g><g><title>        zk1 = g.prox( (4 samples, 0.48%)</title><rect x="91.2575%" y="232" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/admm.py:194 (admm) (4 samples, 0.48%)</title><rect x="91.2575%" y="254" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="267.50"></text></g><g><title>                self._iterates = admm.admm( (4 samples, 0.48%)</title><rect x="91.2575%" y="276" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/qss/qss.py:288 (solve) (4 samples, 0.48%)</title><rect x="91.2575%" y="298" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="311.50"></text></g><g><title>        objval, soln = solver.solve(**solver_kwargs) (4 samples, 0.48%)</title><rect x="91.2575%" y="320" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="333.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:132 (_solve_qss) (4 samples, 0.48%)</title><rect x="91.2575%" y="342" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="355.50"></text></g><g><title>            result = self._solve_qss(canonical_form, **kwargs) (4 samples, 0.48%)</title><rect x="91.2575%" y="364" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="377.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/gfosd/problem.py:90 (decompose) (4 samples, 0.48%)</title><rect x="91.2575%" y="386" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="399.50"></text></g><g><title>    problem.decompose(solver=solver, verbose=verbose, eps_abs=1e-6, eps_rel=1e-6) (4 samples, 0.48%)</title><rect x="91.2575%" y="408" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/_osd_signal_decompositions.py:233 (_osd_l1_l1d1_l2d2p365) (4 samples, 0.48%)</title><rect x="91.2575%" y="430" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="443.50"></text></g><g><title>        res = _osd_l1_l1d1_l2d2p365( (4 samples, 0.48%)</title><rect x="91.2575%" y="452" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="465.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/signal_decompositions.py:214 (l1_l1d1_l2d2p365) (4 samples, 0.48%)</title><rect x="91.2575%" y="474" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="487.50"></text></g><g><title>            s1, s2, s3 = l1_l1d1_l2d2p365( (4 samples, 0.48%)</title><rect x="91.2575%" y="496" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="509.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/capacity_change.py:45 (run) (4 samples, 0.48%)</title><rect x="91.2575%" y="518" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="531.50"></text></g><g><title>            self.capacity_analysis.run( (4 samples, 0.48%)</title><rect x="91.2575%" y="540" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="553.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:890 (capacity_clustering) (4 samples, 0.48%)</title><rect x="91.2575%" y="562" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="575.50"></text></g><g><title>            self.capacity_clustering(solver=solver) (4 samples, 0.48%)</title><rect x="91.2575%" y="584" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="597.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:396 (run_pipeline) (4 samples, 0.48%)</title><rect x="91.2575%" y="606" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="619.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (4 samples, 0.48%)</title><rect x="91.2575%" y="628" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="641.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (4 samples, 0.48%)</title><rect x="91.2575%" y="650" width="0.4790%" height="21" fill="rgb(255,239,239)" fg:x="762" fg:w="4"/><text x="91.5075%" y="663.50"></text></g><g><title>                _sparsetools.csr_has_canonical_format( (2 samples, 0.24%)</title><rect x="92.2156%" y="144" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="770" fg:w="2"/><text x="92.4656%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_compressed.py:1098 (__get_has_canonical_format) (2 samples, 0.24%)</title><rect x="92.2156%" y="166" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="770" fg:w="2"/><text x="92.4656%" y="179.50"></text></g><g><title>        if self.has_canonical_format: (2 samples, 0.24%)</title><rect x="92.2156%" y="188" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="770" fg:w="2"/><text x="92.4656%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/scipy/sparse/_compressed.py:1115 (sum_duplicates) (2 samples, 0.24%)</title><rect x="92.2156%" y="210" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="770" fg:w="2"/><text x="92.4656%" y="223.50"></text></g><g><title>                x.sum_duplicates() (2 samples, 0.24%)</title><rect x="92.2156%" y="232" width="0.2395%" height="21" fill="rgb(255,242,242)" fg:x="770" fg:w="2"/><text x="92.4656%" y="245.50"></text></g><g><title>DATA_CORPUS = pd.read_csv( (38 samples, 4.55%)</title><rect x="92.4551%" y="320" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="333.50">DA..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/shade.py:27 (&lt;module&gt;) (38 samples, 4.55%)</title><rect x="92.4551%" y="342" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="355.50">/ho..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="364" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="377.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (38 samples, 4.55%)</title><rect x="92.4551%" y="386" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="399.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="408" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="421.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (38 samples, 4.55%)</title><rect x="92.4551%" y="430" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="443.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="452" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="465.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (38 samples, 4.55%)</title><rect x="92.4551%" y="474" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="487.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="496" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="509.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (38 samples, 4.55%)</title><rect x="92.4551%" y="518" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="531.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="540" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="553.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (38 samples, 4.55%)</title><rect x="92.4551%" y="562" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="575.50">&lt;fr..</text></g><g><title>from solardatatools.algorithms.shade import ShadeAnalysis (38 samples, 4.55%)</title><rect x="92.4551%" y="584" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="597.50">fr..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/algorithms/__init__.py:5 (&lt;module&gt;) (38 samples, 4.55%)</title><rect x="92.4551%" y="606" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="619.50">/ho..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="628" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="641.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (38 samples, 4.55%)</title><rect x="92.4551%" y="650" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="663.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="672" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="685.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (38 samples, 4.55%)</title><rect x="92.4551%" y="694" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="707.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="716" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="729.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (38 samples, 4.55%)</title><rect x="92.4551%" y="738" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="751.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="760" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="773.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (38 samples, 4.55%)</title><rect x="92.4551%" y="782" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="795.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="804" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="817.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (38 samples, 4.55%)</title><rect x="92.4551%" y="826" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="839.50">&lt;fr..</text></g><g><title>from solardatatools.algorithms import SunriseSunset (38 samples, 4.55%)</title><rect x="92.4551%" y="848" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="861.50">fr..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_filling.py:12 (&lt;module&gt;) (38 samples, 4.55%)</title><rect x="92.4551%" y="870" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="883.50">/ho..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="892" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="905.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (38 samples, 4.55%)</title><rect x="92.4551%" y="914" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="927.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="936" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="949.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (38 samples, 4.55%)</title><rect x="92.4551%" y="958" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="971.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="980" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="993.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (38 samples, 4.55%)</title><rect x="92.4551%" y="1002" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1015.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1024" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1037.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (38 samples, 4.55%)</title><rect x="92.4551%" y="1046" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1059.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1068" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1081.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (38 samples, 4.55%)</title><rect x="92.4551%" y="1090" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1103.50">&lt;fr..</text></g><g><title>from solardatatools.data_filling import zero_nighttime, interp_missing (38 samples, 4.55%)</title><rect x="92.4551%" y="1112" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1125.50">fr..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:30 (&lt;module&gt;) (38 samples, 4.55%)</title><rect x="92.4551%" y="1134" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1147.50">/ho..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1156" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1169.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (38 samples, 4.55%)</title><rect x="92.4551%" y="1178" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1191.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1200" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1213.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (38 samples, 4.55%)</title><rect x="92.4551%" y="1222" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1235.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1244" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1257.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (38 samples, 4.55%)</title><rect x="92.4551%" y="1266" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1279.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1288" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1301.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (38 samples, 4.55%)</title><rect x="92.4551%" y="1310" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1323.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1332" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1345.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (38 samples, 4.55%)</title><rect x="92.4551%" y="1354" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1367.50">&lt;fr..</text></g><g><title>from solardatatools.data_handler import DataHandler (38 samples, 4.55%)</title><rect x="92.4551%" y="1376" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1389.50">fr..</text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/__init__.py:9 (&lt;module&gt;) (38 samples, 4.55%)</title><rect x="92.4551%" y="1398" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1411.50">/ho..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1420" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1433.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:228 (_call_with_frames_removed) (38 samples, 4.55%)</title><rect x="92.4551%" y="1442" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1455.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1464" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1477.50"></text></g><g><title>&lt;frozen importlib._bootstrap_external&gt;:850 (exec_module) (38 samples, 4.55%)</title><rect x="92.4551%" y="1486" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1499.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1508" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1521.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:680 (_load_unlocked) (38 samples, 4.55%)</title><rect x="92.4551%" y="1530" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1543.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1552" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1565.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:986 (_find_and_load_unlocked) (38 samples, 4.55%)</title><rect x="92.4551%" y="1574" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1587.50">&lt;fr..</text></g><g><title> (38 samples, 4.55%)</title><rect x="92.4551%" y="1596" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1609.50"></text></g><g><title>&lt;frozen importlib._bootstrap&gt;:1007 (_find_and_load) (38 samples, 4.55%)</title><rect x="92.4551%" y="1618" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1631.50">&lt;fr..</text></g><g><title>from solardatatools import DataHandler (38 samples, 4.55%)</title><rect x="92.4551%" y="1640" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1653.50">fr..</text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:3 (&lt;module&gt;) (38 samples, 4.55%)</title><rect x="92.4551%" y="1662" width="4.5509%" height="21" fill="rgb(255,218,218)" fg:x="772" fg:w="38"/><text x="92.7051%" y="1675.50">/ho..</text></g><g><title>                chunks = self._reader.read_low_memory(nrows) (41 samples, 4.91%)</title><rect x="92.4551%" y="144" width="4.9102%" height="21" fill="rgb(255,216,216)" fg:x="772" fg:w="41"/><text x="92.7051%" y="157.50">   ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py:234 (read) (41 samples, 4.91%)</title><rect x="92.4551%" y="166" width="4.9102%" height="21" fill="rgb(255,216,216)" fg:x="772" fg:w="41"/><text x="92.7051%" y="179.50">/hom..</text></g><g><title>                ) = self._engine.read(  # type: ignore[attr-defined] (41 samples, 4.91%)</title><rect x="92.4551%" y="188" width="4.9102%" height="21" fill="rgb(255,216,216)" fg:x="772" fg:w="41"/><text x="92.7051%" y="201.50">   ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/readers.py:1748 (read) (41 samples, 4.91%)</title><rect x="92.4551%" y="210" width="4.9102%" height="21" fill="rgb(255,216,216)" fg:x="772" fg:w="41"/><text x="92.7051%" y="223.50">/hom..</text></g><g><title>        return parser.read(nrows) (41 samples, 4.91%)</title><rect x="92.4551%" y="232" width="4.9102%" height="21" fill="rgb(255,216,216)" fg:x="772" fg:w="41"/><text x="92.7051%" y="245.50">   ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/readers.py:617 (_read) (41 samples, 4.91%)</title><rect x="92.4551%" y="254" width="4.9102%" height="21" fill="rgb(255,216,216)" fg:x="772" fg:w="41"/><text x="92.7051%" y="267.50">/hom..</text></g><g><title>    return _read(filepath_or_buffer, kwds) (41 samples, 4.91%)</title><rect x="92.4551%" y="276" width="4.9102%" height="21" fill="rgb(255,216,216)" fg:x="772" fg:w="41"/><text x="92.7051%" y="289.50">   ..</text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/io/parsers/readers.py:948 (read_csv) (41 samples, 4.91%)</title><rect x="92.4551%" y="298" width="4.9102%" height="21" fill="rgb(255,216,216)" fg:x="772" fg:w="41"/><text x="92.7051%" y="311.50">/hom..</text></g><g><title>                df = pd.read_csv(file_path) (3 samples, 0.36%)</title><rect x="97.0060%" y="320" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="810" fg:w="3"/><text x="97.2560%" y="333.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:31 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="97.0060%" y="342" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="810" fg:w="3"/><text x="97.2560%" y="355.50"></text></g><g><title>                converted = ints_to_pydatetime( (3 samples, 0.36%)</title><rect x="97.3653%" y="144" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="157.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/core/arrays/datetimes.py:654 (__iter__) (3 samples, 0.36%)</title><rect x="97.3653%" y="166" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="179.50"></text></g><g><title>        unique_elements = set(islice(arg, check_count)) (3 samples, 0.36%)</title><rect x="97.3653%" y="188" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="201.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/core/tools/datetimes.py:208 (should_cache) (3 samples, 0.36%)</title><rect x="97.3653%" y="210" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="223.50"></text></g><g><title>        if not should_cache(arg): (3 samples, 0.36%)</title><rect x="97.3653%" y="232" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="245.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/core/tools/datetimes.py:246 (_maybe_cache) (3 samples, 0.36%)</title><rect x="97.3653%" y="254" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="267.50"></text></g><g><title>        cache_array = _maybe_cache(arg, format, cache, convert_listlike) (3 samples, 0.36%)</title><rect x="97.3653%" y="276" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="289.50"></text></g><g><title>/home/ec2-user/.venv/lib64/python3.9/site-packages/pandas/core/tools/datetimes.py:1117 (to_datetime) (3 samples, 0.36%)</title><rect x="97.3653%" y="298" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="311.50"></text></g><g><title>    df.index = pd.to_datetime(df.index) (3 samples, 0.36%)</title><rect x="97.3653%" y="320" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="333.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/time_axis_manipulation.py:133 (standardize_time_axis) (3 samples, 0.36%)</title><rect x="97.3653%" y="342" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="355.50"></text></g><g><title>            self.data_frame, sn_deviation = standardize_time_axis( (3 samples, 0.36%)</title><rect x="97.3653%" y="364" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="377.50"></text></g><g><title>/home/ec2-user/solar-data-tools/solardatatools/data_handler.py:235 (run_pipeline) (3 samples, 0.36%)</title><rect x="97.3653%" y="386" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="399.50"></text></g><g><title>                dh.run_pipeline(power_col=&apos;ac_power_01&apos;) (3 samples, 0.36%)</title><rect x="97.3653%" y="408" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="421.50"></text></g><g><title>/home/ec2-user/solar-data-tools/profiling.py:35 (&lt;module&gt;) (3 samples, 0.36%)</title><rect x="97.3653%" y="430" width="0.3593%" height="21" fill="rgb(255,241,241)" fg:x="813" fg:w="3"/><text x="97.6153%" y="443.50"></text></g><g><title>all (835 samples, 100%)</title><rect x="0.0000%" y="100" width="100.0000%" height="21" fill="rgb(255,100,100)" fg:x="0" fg:w="835"/><text x="0.2500%" y="113.50"></text></g><g class="running-frame"><title>➤ CPU ➤ (835 samples, 100.00%)</title><rect x="0.0000%" y="122" width="100.0000%" height="21" fill="rgb(255,100,100)" fg:x="0" fg:w="835"/><text x="0.2500%" y="135.50">➤ CPU ➤</text></g></svg><style type="text/css">
.waiting-frame rect { fill: #ffb264; }
.dead-frame rect, .unstarted-frame rect { fill-opacity: 0.3; fill: white; }
.running-frame rect { fill: #b2b2ff; }
</style></svg>